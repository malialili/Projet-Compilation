package org.calculette;

import java_cup.runtime.*;

%%
%class CalculetteLexer
%cupsym CalculetteSymbol
%line
%column
%cup

%{
    StringBuffer string = new StringBuffer();
    
    private Symbol symbol (int type) {
	return new Symbol (type, yyline, yycolumn);
    }
    
    private Symbol symbol (int type, Object value) {
	return new Symbol (type, yyline, yycolumn, value);
    }
%}

LineTerminator	= \r|\n|\r\n
WhiteSpace	= {LineTerminator} | [ \t\f]
Integer		= [0-9]+
ID		=[a]
%state STRING

%%

<YYINITIAL> { 
    /* -------------------------------------------------
       Separateurs Operateurs
       ------------------------------------------------- */
    
    "("	{ System.err.printf("***Keyword: LPAR ***Line: %d  ***Col: %d\n", yyline,yycolumn);	return symbol(CalculetteSymbol.LPAR, yytext()); }
    ")"	{ System.err.printf("***Keyword: RPAR ***Line: %d  ***Col: %d\n", yyline,yycolumn); 	return symbol(CalculetteSymbol.RPAR , yytext()); }
    "+"	{ System.err.printf("***Keyword: PLUS ***Line: %d  ***Col: %d\n", yyline,yycolumn); 	return symbol(CalculetteSymbol.PLUS, yytext()); }
    "-"	{ System.err.printf("***Keyword: MINUS ***Line: %d  ***Col: %d\n", yyline,yycolumn); 	return symbol(CalculetteSymbol.MINUS, yytext()); }
    "*"	{ System.err.printf("***Keyword: MULT ***Line: %d  ***Col: %d\n", yyline,yycolumn); 	return symbol(CalculetteSymbol.MULT, yytext()); }
    "/"	{ System.err.printf("***Keyword: DIV ***Line: %d  ***Col: %d\n", yyline,yycolumn); 	return symbol(CalculetteSymbol.DIV, yytext()); }
    ";"	{ System.err.printf("***Keyword: SEMIC ***Line: %d  ***Col: %d\n", yyline,yycolumn); 	return symbol(CalculetteSymbol.SEMIC, yytext()); }
    \"	{ string.setLength(0); yybegin(STRING); }
    
    /* -------------------------------------------------
       litteraux
       ------------------------------------------------- */
    
    {Integer}     { 
	System.err.printf("***Integer: %s ***Line: %d  ***Col: %d\n", yytext(), yyline,yycolumn );
	return symbol(CalculetteSymbol.INTEGER, yytext()); 
    }
    
    /* -------------------------------------------------
       Commentaires - Caracteres non pris en compte
       ------------------------------------------------- */
    
    {WhiteSpace}                   {   /* ignore */ }
    
}

<STRING> {
    [^\n\r\"\\]+                   { string.append( yytext() ); }
    \\t                            { string.append('\t'); }
    \\n                            { string.append('\n'); }
    \\r                            { string.append('\r'); }
    \\\"                           { string.append('\"'); }
    \\                             { string.append('\\'); }
    \"                             {
	System.err.printf("***String: %s\n", string.toString());
	yybegin(YYINITIAL); 
	return symbol(CalculetteSymbol.STRING_LITERAL, string.toString()); }
 }
    
/* -------------------------------------------------
	Autre
   ------------------------------------------------- */
.                   {   /* ignore */ }
