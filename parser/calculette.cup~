package org.calculette;
 
import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import java.lang.*;
import org.calculette.ArbreSyntAbstr;
import org.calculette.EnumTag;

parser code {:
     

     public void syntax_error(Symbol cur_token)	{
	System.err.printf("Error!!!!!!!!!! at Line: %d Col: %d\n",cur_token.left, cur_token.right );
     }
:}


terminal LPAR, RPAR, SEMIC, PLUS, MINUS, MINUS_U, MULT, DIV, AFF;
terminal String INTEGER, STRING_LITERAL;
terminal String TOK_ID;

/* The grammar */
non terminal ArbreSyntAbstr expr, axiom, stm, lhs, rhs;

precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left MINUS_U;

start with axiom;

axiom ::= 
	expr:t SEMIC
	{: 
	 System.err.printf("***axiom\n");
	 RESULT = t; 
	 :} 
	|stm:t SEMIC
	{: 
	 System.err.printf("***axiom\n");
	 RESULT = t; 
	 :}
	;

stm ::=
	lhs:e1 AFF rhs:e2
	{: 
	 System.err.printf("***stm\n");
	 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.AFF); 
	 :}
	 ;
rhs::= expr:e
       {: 
	 System.err.printf("***axiom\n");
	 RESULT = e; 
	 :}
	;
lhs::=TOK_ID:t
       {: 
	 System.err.printf("***axiom\n");
	RESULT = new ArbreSyntAbstr(EnumTag.TOK_ID, t);
	 :}
	;

expr ::=
	expr:e1 PLUS expr:e2
	{: 
	 System.err.printf("***expr\n");
	 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.PLUS); 
	 :} 
	| 

	expr:e1 MINUS expr:e2
	{: 
	 System.err.printf("***expr  Line:%d  Col:%d \n", e1left, e1right);
	 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.MINUS); 
	 :} 
	| 

	expr:e1 MULT expr:e2
	{:   
	 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right);
	 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.MULT); 
	 :} 
	| 

	expr:e1 DIV expr:e2
	{:   
	 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right);
	 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.DIV); 
	 :} 
	| 

	LPAR expr:e RPAR
	{: 
	 System.err.printf("***expr   Line:%d  Col:%d \n", eleft, eright);
	 RESULT = e; 
	 :} 
	| 

	MINUS expr:e 
	{: 
	 System.err.printf("***expr  Line:%d  Col:%d \n", eleft, eright);
	 RESULT = new ArbreSyntAbstr(e, EnumTag.MINUS_U); 
	 :} %prec MINUS_U
	| 

	INTEGER:str
	{: 
	    System.err.printf("***expr Line:%d  Col:%d \n", strleft, strright);
	    RESULT = new ArbreSyntAbstr(EnumTag.INTEGER, Integer.parseInt( str )); 
	    :}
	;
