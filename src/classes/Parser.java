
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 08 15:33:34 CET 2011
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 08 15:33:34 CET 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\013\004\000\002\013\003\000\002\015\002" +
    "\000\002\016\002\000\002\021\002\000\002\014\005\000" +
    "\002\022\002\000\002\014\005\000\002\011\004\000\002" +
    "\011\003\000\002\012\006\000\002\017\004\000\002\017" +
    "\003\000\002\020\007\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\013\000\002\010\005\000\002\010" +
    "\005\000\002\023\002\000\002\010\007\000\002\010\005" +
    "\000\002\010\004\000\002\010\003\000\002\004\004\000" +
    "\002\004\003\000\002\005\006\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\006\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\012\004\001\002\000\006\004\ufffc\005" +
    "\ufffc\001\002\000\004\002\007\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002\000\006\004\011\005" +
    "\014\001\002\000\004\056\ufffa\001\002\000\010\004\ufffd" +
    "\005\ufffd\006\ufffd\001\002\000\010\004\011\005\014\006" +
    "\112\001\002\000\004\022\ufff8\001\002\000\004\022\020" +
    "\001\002\000\010\004\ufff7\005\ufff7\006\ufff7\001\002\000" +
    "\012\004\ufff2\005\ufff2\006\ufff2\022\020\001\002\000\004" +
    "\056\021\001\002\000\004\054\022\001\002\000\036\010" +
    "\030\022\025\023\023\024\040\025\033\026\041\027\026" +
    "\030\034\031\032\032\035\033\027\034\024\035\031\056" +
    "\037\001\002\000\012\011\ufff0\016\ufff0\020\ufff0\036\ufff0" +
    "\001\002\000\004\014\100\001\002\000\004\056\077\001" +
    "\002\000\012\011\uffec\016\uffec\020\uffec\036\uffec\001\002" +
    "\000\004\010\074\001\002\000\036\010\030\022\025\023" +
    "\023\024\040\025\033\026\041\027\026\030\034\031\032" +
    "\032\035\033\027\034\024\035\031\056\037\001\002\000" +
    "\004\012\060\001\002\000\004\010\055\001\002\000\012" +
    "\011\uffed\016\uffed\020\uffed\036\uffed\001\002\000\004\010" +
    "\052\001\002\000\004\010\047\001\002\000\010\016\043" +
    "\020\042\036\044\001\002\000\012\011\uffe0\016\uffe0\020" +
    "\uffe0\036\uffe0\001\002\000\012\011\uffef\016\uffef\020\uffef" +
    "\036\uffef\001\002\000\012\011\uffee\016\uffee\020\uffee\036" +
    "\uffee\001\002\000\036\010\030\022\025\023\023\024\040" +
    "\025\033\026\041\027\026\030\034\031\032\032\035\033" +
    "\027\034\024\035\031\056\037\001\002\000\012\004\ufff1" +
    "\005\ufff1\006\ufff1\022\ufff1\001\002\000\036\010\030\022" +
    "\025\023\023\024\040\025\033\026\041\027\026\030\034" +
    "\031\032\032\035\033\027\034\024\035\031\056\037\001" +
    "\002\000\012\011\uffe6\016\uffe6\020\042\036\044\001\002" +
    "\000\012\011\uffe5\016\uffe5\020\042\036\uffe5\001\002\000" +
    "\036\010\030\022\025\023\023\024\040\025\033\026\041" +
    "\027\026\030\034\031\032\032\035\033\027\034\024\035" +
    "\031\056\037\001\002\000\010\011\051\020\042\036\044" +
    "\001\002\000\012\011\uffeb\016\uffeb\020\uffeb\036\uffeb\001" +
    "\002\000\036\010\030\022\025\023\023\024\040\025\033" +
    "\026\041\027\026\030\034\031\032\032\035\033\027\034" +
    "\024\035\031\056\037\001\002\000\010\011\054\020\042" +
    "\036\044\001\002\000\012\011\uffe9\016\uffe9\020\uffe9\036" +
    "\uffe9\001\002\000\036\010\030\022\025\023\023\024\040" +
    "\025\033\026\041\027\026\030\034\031\032\032\035\033" +
    "\027\034\024\035\031\056\037\001\002\000\010\011\057" +
    "\020\042\036\044\001\002\000\012\011\uffe8\016\uffe8\020" +
    "\uffe8\036\uffe8\001\002\000\004\056\uffe4\001\002\000\004" +
    "\056\062\001\002\000\004\017\067\001\002\000\004\013" +
    "\066\001\002\000\014\004\ufff5\005\ufff5\006\ufff5\013\ufff5" +
    "\056\062\001\002\000\012\004\ufff6\005\ufff6\006\ufff6\013" +
    "\ufff6\001\002\000\012\011\uffe3\016\uffe3\020\uffe3\036\uffe3" +
    "\001\002\000\036\010\030\022\025\023\023\024\040\025" +
    "\033\026\041\027\026\030\034\031\032\032\035\033\027" +
    "\034\024\035\031\056\037\001\002\000\010\016\071\020" +
    "\042\036\044\001\002\000\014\004\ufff4\005\ufff4\006\ufff4" +
    "\013\ufff4\056\ufff4\001\002\000\010\011\073\020\042\036" +
    "\044\001\002\000\012\011\uffe2\016\uffe2\020\uffe2\036\uffe2" +
    "\001\002\000\036\010\030\022\025\023\023\024\040\025" +
    "\033\026\041\027\026\030\034\031\032\032\035\033\027" +
    "\034\024\035\031\056\037\001\002\000\010\011\076\020" +
    "\042\036\044\001\002\000\012\011\uffea\016\uffea\020\uffea" +
    "\036\uffea\001\002\000\012\011\uffe1\016\uffe1\020\uffe1\036" +
    "\uffe1\001\002\000\004\060\101\001\002\000\004\020\102" +
    "\001\002\000\004\060\103\001\002\000\004\015\104\001" +
    "\002\000\004\010\105\001\002\000\036\010\030\022\025" +
    "\023\023\024\040\025\033\026\041\027\026\030\034\031" +
    "\032\032\035\033\027\034\024\035\031\056\037\001\002" +
    "\000\010\011\107\020\042\036\044\001\002\000\012\011" +
    "\uffe7\016\uffe7\020\uffe7\036\uffe7\001\002\000\010\004\ufff3" +
    "\005\ufff3\006\ufff3\001\002\000\010\004\ufffe\005\ufffe\006" +
    "\ufffe\001\002\000\022\010\114\050\113\055\124\056\121" +
    "\057\115\060\125\061\120\062\116\001\002\000\022\010" +
    "\114\050\113\055\124\056\121\057\115\060\125\061\120" +
    "\062\116\001\002\000\022\010\114\050\113\055\124\056" +
    "\121\057\115\060\125\061\120\062\116\001\002\000\046" +
    "\010\uffc9\011\uffc9\016\uffc9\020\uffc9\021\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\052\uffc9\053\uffc9\054\uffc9\001\002\000" +
    "\046\010\uffc8\011\uffc8\016\uffc8\020\uffc8\021\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\052\uffc8\053\uffc8\054\uffc8\001\002" +
    "\000\024\007\uffde\010\uffde\050\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\001\002\000\046\010\uffca" +
    "\011\uffca\016\uffca\020\uffca\021\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\052\uffca\053\uffca\054\uffca\001\002\000\046\010" +
    "\uffc6\011\uffc6\016\uffc6\020\uffc6\021\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\052\uffc6\053\uffc6\054\uffc6\001\002\000\024" +
    "\007\173\010\114\050\113\055\124\056\121\057\115\060" +
    "\125\061\120\062\116\001\002\000\042\010\133\020\142" +
    "\021\137\037\127\040\145\041\144\042\140\043\136\044" +
    "\131\045\135\046\143\047\134\050\130\052\132\053\141" +
    "\054\167\001\002\000\022\010\114\050\113\055\124\056" +
    "\121\057\115\060\125\061\120\062\116\001\002\000\046" +
    "\010\uffcb\011\uffcb\016\uffcb\020\uffcb\021\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\052\uffcb\053\uffcb\054\uffcb\001\002\000" +
    "\046\010\133\011\uffc7\016\uffc7\020\142\021\137\037\127" +
    "\040\145\041\144\042\140\043\136\044\131\045\135\046" +
    "\143\047\134\050\130\052\132\053\141\054\uffc7\001\002" +
    "\000\022\010\114\050\113\055\124\056\121\057\115\060" +
    "\125\061\120\062\116\001\002\000\022\010\114\050\113" +
    "\055\124\056\121\057\115\060\125\061\120\062\116\001" +
    "\002\000\022\010\114\050\113\055\124\056\121\057\115" +
    "\060\125\061\120\062\116\001\002\000\022\010\114\050" +
    "\113\055\124\056\121\057\115\060\125\061\120\062\116" +
    "\001\002\000\022\010\114\050\113\055\124\056\121\057" +
    "\115\060\125\061\120\062\116\001\002\000\022\010\114" +
    "\050\113\055\124\056\121\057\115\060\125\061\120\062" +
    "\116\001\002\000\022\010\114\050\113\055\124\056\121" +
    "\057\115\060\125\061\120\062\116\001\002\000\022\010" +
    "\114\050\113\055\124\056\121\057\115\060\125\061\120" +
    "\062\116\001\002\000\004\056\154\001\002\000\022\010" +
    "\114\050\113\055\124\056\121\057\115\060\125\061\120" +
    "\062\116\001\002\000\022\010\114\050\113\055\124\056" +
    "\121\057\115\060\125\061\120\062\116\001\002\000\022" +
    "\010\114\050\113\055\124\056\121\057\115\060\125\061" +
    "\120\062\116\001\002\000\022\010\114\050\113\055\124" +
    "\056\121\057\115\060\125\061\120\062\116\001\002\000" +
    "\022\010\114\050\113\055\124\056\121\057\115\060\125" +
    "\061\120\062\116\001\002\000\022\010\114\050\113\055" +
    "\124\056\121\057\115\060\125\061\120\062\116\001\002" +
    "\000\046\010\133\011\uffda\016\uffda\020\uffda\021\137\037" +
    "\uffda\040\uffda\041\144\042\140\043\136\044\131\045\135" +
    "\046\143\047\134\050\130\052\132\053\141\054\uffda\001" +
    "\002\000\046\010\133\011\uffd9\016\uffd9\020\uffd9\021\137" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\001\002\000\046\010\133\011\uffd4\016\uffd4\020\uffd4\021" +
    "\137\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\001\002\000\046\010\133\011\uffdc\016\uffdc\020\142" +
    "\021\137\037\127\040\145\041\144\042\140\043\136\044" +
    "\131\045\135\046\143\047\134\050\130\052\132\053\141" +
    "\054\uffdc\001\002\000\046\010\133\011\uffcf\016\uffcf\020" +
    "\uffcf\021\137\037\uffcf\040\uffcf\041\144\042\140\043\136" +
    "\044\131\045\135\046\143\047\uffcf\050\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\001\002\000\046\010\133\011\uffd8\016\uffd8" +
    "\020\uffd8\021\137\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\001\002\000\046\010\uffc5\011\uffc5\016" +
    "\uffc5\020\uffc5\021\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\001\002\000\046\010\uffcd\011\uffcd" +
    "\016\uffcd\020\uffcd\021\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\001\002\000\046\010\133\011" +
    "\uffd7\016\uffd7\020\uffd7\021\137\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\001\002\000\046\010\133" +
    "\011\uffd5\016\uffd5\020\uffd5\021\137\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\052\uffd5\053\uffd5\054\uffd5\001\002\000\046\010" +
    "\133\011\uffd3\016\uffd3\020\uffd3\021\137\037\uffd3\040\uffd3" +
    "\041\144\042\140\043\136\044\131\045\135\046\143\047" +
    "\uffd3\050\uffd3\052\132\053\141\054\uffd3\001\002\000\042" +
    "\010\133\011\162\020\142\021\137\037\127\040\145\041" +
    "\144\042\140\043\136\044\131\045\135\046\143\047\134" +
    "\050\130\052\132\053\141\001\002\000\046\010\uffcc\011" +
    "\uffcc\016\uffcc\020\uffcc\021\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\001\002\000\046\010\133" +
    "\011\uffd0\016\uffd0\020\uffd0\021\137\037\uffd0\040\uffd0\041" +
    "\144\042\140\043\136\044\131\045\135\046\143\047\uffd0" +
    "\050\uffd0\052\uffd0\053\uffd0\054\uffd0\001\002\000\046\010" +
    "\133\011\uffd6\016\uffd6\020\uffd6\021\137\037\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\052\uffd6\053\uffd6\054\uffd6\001\002\000\046" +
    "\010\133\011\uffd2\016\uffd2\020\uffd2\021\137\037\uffd2\040" +
    "\uffd2\041\144\042\140\043\136\044\131\045\135\046\143" +
    "\047\uffd2\050\uffd2\052\132\053\141\054\uffd2\001\002\000" +
    "\046\010\133\011\uffdb\016\uffdb\020\uffdb\021\137\037\uffdb" +
    "\040\uffdb\041\144\042\140\043\136\044\131\045\135\046" +
    "\143\047\134\050\130\052\132\053\141\054\uffdb\001\002" +
    "\000\022\010\114\050\113\055\124\056\121\057\115\060" +
    "\125\061\120\062\116\001\002\000\042\010\133\016\171" +
    "\020\142\021\137\037\127\040\145\041\144\042\140\043" +
    "\136\044\131\045\135\046\143\047\134\050\130\052\132" +
    "\053\141\001\002\000\024\007\uffdd\010\uffdd\050\uffdd\055" +
    "\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\001\002" +
    "\000\024\007\uffdf\010\uffdf\050\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\001\002\000\004\013\ufffb" +
    "\001\002\000\004\013\175\001\002\000\004\002\uffff\001" +
    "\002\000\042\010\133\011\177\020\142\021\137\037\127" +
    "\040\145\041\144\042\140\043\136\044\131\045\135\046" +
    "\143\047\134\050\130\052\132\053\141\001\002\000\046" +
    "\010\uffce\011\uffce\016\uffce\020\uffce\021\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\052\uffce\053\uffce\054\uffce\001\002\000" +
    "\046\010\133\011\uffd1\016\uffd1\020\uffd1\021\137\037\uffd1" +
    "\040\uffd1\041\144\042\140\043\136\044\131\045\135\046" +
    "\143\047\uffd1\050\uffd1\052\uffd1\053\uffd1\054\uffd1\001\002" +
    "\000\004\056\062\001\002\000\010\004\ufff9\005\ufff9\006" +
    "\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\006\002\004\003\005\001\001\000\004\015" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\012\014\011\001\001\000\004\021" +
    "\200\001\001\000\002\001\001\000\004\014\110\001\001" +
    "\000\004\022\014\001\001\000\006\017\015\020\016\001" +
    "\001\000\002\001\001\000\006\017\107\020\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\045\001\001\000\002\001\001\000\004\010\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\060\001\001\000\006\011\062\012\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\064\012" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\121\005\116\006\122\001\001\000" +
    "\004\006\177\001\001\000\004\006\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\171\006\122\001\001" +
    "\000\002\001\001\000\004\006\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\165\001\001\000\004" +
    "\006\164\001\001\000\004\006\163\001\001\000\004\006" +
    "\162\001\001\000\004\006\160\001\001\000\004\006\157" +
    "\001\001\000\004\006\156\001\001\000\004\006\155\001" +
    "\001\000\004\007\154\001\001\000\004\006\152\001\001" +
    "\000\004\006\151\001\001\000\004\006\150\001\001\000" +
    "\004\006\147\001\001\000\004\006\146\001\001\000\004" +
    "\006\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\201\012\063\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    traceCup=true;
    inRecord=false;
    
    }


    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
    public boolean traceCup;
    public boolean inRecord;
    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // slot ::= IDENTIFIER 
            {
              SyntAbstr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	 if (parser.traceCup) System.err.println("*** expr"); 
	 RESULT = new SyntAbstr(EnumTag.IDENTIFIER); 
	 Type t;
	 if (Main.currentTypedef.getRoot()!=null)
	     t=Main.currentTypedef.find("."+id);
	 else
	     t=null;
	 if (t==null){
	     parser.report_error( "slot \"" + id + "\" unknown", 
				  new Symbol( Symbols.IDENTIFIER, idleft, idright, id ) );
 		 RESULT.putType(new Type(EnumType.ERROR));
	 } else
	     RESULT.putType(t); 
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slot",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= IDENTIFIER 
            {
              SyntAbstr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(EnumTag.IDENTIFIER); 
	    Type t;
	    if (Main.currentEnv.getRoot()!=null)
		t=Main.currentEnv.find(id);
	    else
		t=null;
	    if (t==null){
	     parser.report_error( "unknow \"" + id, 
				  new Symbol( Symbols.IDENTIFIER, idleft, idright, id ) );
 		 RESULT.putType(new Type(EnumType.ERROR));
	    } else
	    RESULT.putType(t); 
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= AMP expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e, EnumTag.AMP); 
	    Type q = new Type(e.getType(), EnumType.POINTER);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= CHARACTER_LITERAL 
            {
              SyntAbstr RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character st = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr");  
	    RESULT = new SyntAbstr(EnumTag.CHARACTER); 
	    Type q = new Type(EnumType.CHARACTER);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= STRING_LITERAL 
            {
              SyntAbstr RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr");  
	    RESULT = new SyntAbstr(EnumTag.STRING); 
	    Type q = new Type(EnumType.STRING);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= FLOAT_LITERAL 
            {
              SyntAbstr RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double fl = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(EnumTag.FLOAT); 
	    Type q = new Type(EnumType.FLOAT);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= INTEGER_LITERAL 
            {
              SyntAbstr RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer it = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(EnumTag.INTEGER); 
	    Type q = new Type(EnumType.INTEGER);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr LPAR expr RPAR 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.FUNCTION); 
		Type hypoth = new Type(e2.getType(), new Type(EnumType.VARIABLE), EnumType.FUNCTION);

		boolean test=e1.getType().eq(hypoth);
		if (!test){
		   parser.report_error( "type " + e1.getType().toString() + " not compatible with " + e2.getType().toString(), 
		  new Symbol( Symbols.LPAR, lparleft, lparright, lpar ) ); 
	   	   	//hypoth.putType(EnumType.ERROR);
		} else {
			test=e1.getType().unify(hypoth);
			if (!test)
		       parser.report_error( "type " + e1.getType().toString() + " not compatible with " + e2.getType().toString(), 
		          new Symbol( Symbols.LPAR, lparleft, lparright, lpar ) ); 
		   	RESULT.putType(hypoth.getRight()); 
	     }
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr DOT slot 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.DOT); 
	    RESULT.putType(e2.getType()); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= LPAR expr RPAR 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	    if (parser.traceCup) System.err.println("*** expr");
	    RESULT = e; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DIV expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	    if (parser.traceCup) System.err.println("*** expr");
	    RESULT = new SyntAbstr(e1, e2, EnumTag.DIV); 
	    Type q = e1.getType();
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr MULT expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.MULT); 
	    Type q = e1.getType();
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= MINUS expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr");  
	    RESULT = new SyntAbstr(e, EnumTag.MINUS_U); 
	    Type q = e.getType();
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MINUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr");
	    RESULT = new SyntAbstr(e1, e2, EnumTag.MINUS); 
	    Type q = e1.getType();
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr PLUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.PLUS); 
	    Type q = e1.getType();
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr NE expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.NE); 
	    Type q = new Type(EnumType.BOOLEAN);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr EQ expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.EQ); 
	    Type q = new Type(EnumType.BOOLEAN);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr GE expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.GE); 
	    Type q = new Type(EnumType.BOOLEAN);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr LE expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.LE); 
	    Type q = new Type(EnumType.BOOLEAN);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr GT expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.GT); 
	    Type q = new Type(EnumType.BOOLEAN);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr LT expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.LT); 
	    Type q = new Type(EnumType.BOOLEAN);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr OR expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.OR); 
	    Type q = new Type(EnumType.BOOLEAN);
	    RESULT.putType(q); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr AND expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    if (parser.traceCup) System.err.println("*** expr"); 
	    RESULT = new SyntAbstr(e1, e2, EnumTag.AND); 
	    Type q = new Type(EnumType.BOOLEAN);
	    RESULT.putType(q); 
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr COMMA expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	 if (parser.traceCup) System.err.println("*** expr");
	 RESULT = new SyntAbstr(e1, e2, EnumTag.TIMES); 
	 Type q = new Type(e1.getType(), e2.getType(), EnumType.TIMES);
	 RESULT.putType(q); 
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= expr EQUAL expr SEMIC 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	if (parser.traceCup) System.err.println("*** statement");  
	RESULT=new SyntAbstr(e1, e2, EnumTag.AFF); 
	boolean u = false;
	if ((e1.getType()!=null) && (e2.getType()!=null))
		u=e1.getType().eq(e2.getType());
	if (!u)
	   parser.report_error( "type error" + e1.getType().toString() + " not compatible with " + e2.getType().toString(), 
	      new Symbol( Symbols.EQUAL, eleft, eright, e ) 
	      );
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_list ::= statement 
            {
              SyntAbstr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	if (parser.traceCup) System.err.println("*** list_statements");  
	RESULT=s; 
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= statement_list statement 
            {
              SyntAbstr RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntAbstr s1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr s2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	if (parser.traceCup) System.err.println("*** list_statements"); 
	RESULT=new SyntAbstr(s1, s2, EnumTag.SEQ); 
	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
 	    Type t1;
	    if (Main.currentTypedef.getRoot()!=null)
		   t1=Main.currentTypedef.find(id);
	    else
		   t1=null;
	    if (t1==null){
		   t1=new Type(EnumType.CONSTANT);
		   Main.currentTypedef.add(id, t1);
	    }
	    RESULT = t1;
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= APOS IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
 	    Type t;
	    if (Main.workingEnv.getRoot()!=null)
		t=Main.workingEnv.find(id);
	    else
		t=null;
	    if (t==null){
		t=new Type(EnumType.VARIABLE);
		Main.workingEnv.add(id, t);
	    }
	    RESULT = t;
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= LPAR type RPAR 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	 if (parser.traceCup) System.err.println("*** type");
	 RESULT = t;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= RECORD LBRACE NT$2 declaration_list RBRACE 
            {
              Type RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	 if (parser.traceCup) System.err.println("*** type");
	 parser.inRecord=false;
	 RESULT = new Type(t, EnumType.RECORD);
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Type RESULT =null;
 parser.inRecord=true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= type COMMA type 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(t1, t2, EnumType.TIMES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= type ARROW type 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(t1, t2, EnumType.FUNCTION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= ARRAY LBRACKET INTEGER_LITERAL COMMA INTEGER_LITERAL RBRACKET LPAR type RPAR 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(t, EnumType.ARRAY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= STACK LPAR type RPAR 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(t, EnumType.STACK); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= LIST LPAR type RPAR 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(t, EnumType.LIST); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= SET LPAR type RPAR 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(t, EnumType.SET); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= POINTER LPAR type RPAR 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(t, EnumType.POINTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(EnumType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= STRING 
            {
              Type RESULT =null;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(EnumType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= CHAR 
            {
              Type RESULT =null;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(EnumType.CHARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= FLOAT 
            {
              Type RESULT =null;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(EnumType.FLOAT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              Type RESULT =null;
		 if (parser.traceCup) System.err.println("*** type");  RESULT = new Type(EnumType.INTEGER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_typedef ::= APOS IDENTIFIER EQUAL type SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	 if (parser.traceCup) System.err.println("*** declaration_typedef");  
	 Main.currentTypedef.add(id, t);
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_typedef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_typedef_list ::= declaration_typedef 
            {
              Object RESULT =null;
		 
	if (parser.traceCup) System.err.println("*** declaration_typedef_list"); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_typedef_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_typedef_list ::= declaration_typedef declaration_typedef_list 
            {
              Object RESULT =null;
		 
	if (parser.traceCup) System.err.println("*** declaration_typedef_list"); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_typedef_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= IDENTIFIER COLON type SEMIC 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	 if (parser.traceCup) System.err.println("*** declaration");  
	 if (parser.inRecord){
	 	Type t1;
	 	if (Main.currentTypedef.getRoot()!=null)
	    	t1=Main.currentTypedef.find(id);
	  	else
	    	t1=null;
	  	if (t1==null){
	  		t1=new Type(EnumType.CONSTANT);
			Main.currentTypedef.add("."+id, t2);
	    	}
	  	RESULT = new Type(t1, t2, EnumType.TIMES);
	 } else {
	 	Main.workingEnv.add(id, t2);
	 	RESULT = t2;
	 }
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_list ::= declaration 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	if (parser.traceCup) System.err.println("*** declaration_list"); 
	RESULT = t; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_list ::= declaration declaration_list 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type l = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	if (parser.traceCup) System.err.println("*** declaration_list"); 
	RESULT = new Type(t, l, EnumType.TIMES); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // head ::= TYPEDEF NT$1 declaration_typedef_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	    Main.workingEnv=Main.currentTypedef;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;

       if (parser.traceCup) System.err.println("*** head");  
	    Main.workingEnv=Main.currentTypedef;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // head ::= VAR NT$0 declaration_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	    Main.workingEnv=Main.currentEnv;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;

if (parser.traceCup) System.err.println("*** head");  
	     Main.workingEnv=Main.currentEnv;
	     
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // endBlock ::= 
            {
              Object RESULT =null;
		 
if (parser.traceCup) System.err.println("*** endBlock");  
	Main.currentEnv=Main.currentEnv.getPrev(); 
	Main.currentTypedef=Main.currentTypedef.getPrev(); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endBlock",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // beginBlock ::= 
            {
              Object RESULT =null;
		 
if (parser.traceCup) System.err.println("*** beginBlock");  
		  
		  	Env n = new Env(Main.currentEnv);
	     if (Main.firstEnv==null){
		 Main.firstEnv=n;
	     } else {
		 Main.currentEnv.putNext(n);
	     }
	     Main.currentEnv=n;
	    n = new Env(Main.currentTypedef);
	    if (Main.firstTypedef==null){
		  Main.firstTypedef=n;
	    } else {
		  Main.currentTypedef.putNext(n);
	    }
	    Main.currentTypedef=n;
	     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beginBlock",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // head_list ::= head 
            {
              Object RESULT =null;
		 if (parser.traceCup) System.err.println("*** head_list");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // head_list ::= head_list head 
            {
              Object RESULT =null;
		 if (parser.traceCup) System.err.println("*** head_list");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= LBRACE beginBlock head_list BEGIN statement_list END endBlock RBRACE 
            {
              SyntAbstr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
	 if (parser.traceCup) System.err.println("*** block"); 
	 RESULT=s; 
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= block 
            {
              SyntAbstr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntAbstr b = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	 if (parser.traceCup) System.err.println("*** axiom");  
	 RESULT=b; 
	 /***/
	 if (Main.firstEnv!=null)
	     Main.firstEnv.toDot("data/env"); 
	 /***/ /***/
	 if (Main.firstTypedef!=null)
	     Main.firstTypedef.toDot("data/typedef"); 
	 /***/
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntAbstr start_val = (SyntAbstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

