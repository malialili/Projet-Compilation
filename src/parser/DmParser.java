
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 03 23:14:08 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import java.lang.*;
import stree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 03 23:14:08 CET 2014
  */
public class DmParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DmParser() {super();}

  /** Constructor which sets the default scanner. */
  public DmParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DmParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\002\005" +
    "\000\002\020\020\000\002\022\004\000\002\023\005\000" +
    "\002\023\005\000\002\007\005\000\002\007\006\000\002" +
    "\012\004\000\002\012\003\000\002\013\006\000\002\013" +
    "\006\000\002\013\007\000\002\013\005\000\002\024\007" +
    "\000\002\024\005\000\002\025\005\000\002\025\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\015\005\000\002\015" +
    "\006\000\002\015\004\000\002\016\005\000\002\011\004" +
    "\000\002\011\003\000\002\010\004\000\002\010\004\000" +
    "\002\004\005\000\002\004\007\000\002\004\005\000\002" +
    "\004\005\000\002\004\007\000\002\004\006\000\002\004" +
    "\004\000\002\026\005\000\002\027\005\000\002\027\003" +
    "\000\002\006\003\000\002\005\003\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\004\000\002\003" +
    "\003\000\002\003\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\004\000\002" +
    "\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\004\010\062\013\073\004\001\002\000" +
    "\004\021\173\001\002\000\032\004\ufff4\006\ufff4\012\ufff4" +
    "\025\ufff4\052\ufff4\055\ufff4\057\ufff4\062\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\073\ufff4\001\002\000\010\004\010\062\013" +
    "\073\004\001\002\000\004\002\230\001\002\000\006\005" +
    "\211\006\014\001\002\000\006\004\056\062\061\001\002" +
    "\000\004\002\000\001\002\000\004\006\014\001\002\000" +
    "\006\006\014\073\026\001\002\000\004\021\016\001\002" +
    "\000\014\070\017\071\023\074\021\075\024\076\022\001" +
    "\002\000\006\007\uffeb\010\uffeb\001\002\000\004\010\025" +
    "\001\002\000\006\007\uffe9\010\uffe9\001\002\000\006\007" +
    "\uffe8\010\uffe8\001\002\000\006\007\uffea\010\uffea\001\002" +
    "\000\006\007\uffe7\010\uffe7\001\002\000\032\004\ufff1\006" +
    "\ufff1\012\ufff1\025\ufff1\052\ufff1\055\ufff1\057\ufff1\062\ufff1" +
    "\066\ufff1\067\ufff1\070\ufff1\073\ufff1\001\002\000\004\021" +
    "\035\001\002\000\004\007\034\001\002\000\004\022\031" +
    "\001\002\000\004\073\026\001\002\000\004\007\033\001" +
    "\002\000\012\010\uffef\021\uffef\022\uffef\024\uffef\001\002" +
    "\000\012\010\uffee\021\uffee\022\uffee\024\uffee\001\002\000" +
    "\020\023\037\053\040\070\017\071\023\074\021\075\024" +
    "\076\022\001\002\000\004\007\uffec\001\002\000\004\020" +
    "\052\001\002\000\004\024\043\001\002\000\004\007\uffed" +
    "\001\002\000\006\007\uffe4\010\uffe4\001\002\000\010\004" +
    "\045\062\013\073\004\001\002\000\012\004\045\025\051" +
    "\062\013\073\004\001\002\000\004\006\014\001\002\000" +
    "\004\010\047\001\002\000\032\004\ufff0\006\ufff0\012\ufff0" +
    "\025\ufff0\052\ufff0\055\ufff0\057\ufff0\062\ufff0\066\ufff0\067" +
    "\ufff0\070\ufff0\073\ufff0\001\002\000\032\004\ufff5\006\ufff5" +
    "\012\ufff5\025\ufff5\052\ufff5\055\ufff5\057\ufff5\062\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\073\ufff5\001\002\000\006\007\uffe3" +
    "\010\uffe3\001\002\000\016\053\054\070\017\071\023\074" +
    "\021\075\024\076\022\001\002\000\006\007\uffe6\010\uffe6" +
    "\001\002\000\004\024\043\001\002\000\006\007\uffe5\010" +
    "\uffe5\001\002\000\006\005\211\006\014\001\002\000\010" +
    "\002\ufffa\004\ufffa\062\ufffa\001\002\000\004\002\ufffe\001" +
    "\002\000\004\006\014\001\002\000\004\024\064\001\002" +
    "\000\010\002\ufff9\004\ufff9\062\ufff9\001\002\000\030\004" +
    "\045\006\103\012\076\052\070\055\071\057\067\062\013" +
    "\066\074\067\102\070\101\073\073\001\002\000\016\010" +
    "\210\011\110\012\111\014\107\015\112\016\106\001\002" +
    "\000\026\006\uffe1\012\uffe1\025\uffe1\052\uffe1\055\uffe1\057" +
    "\uffe1\066\uffe1\067\uffe1\070\uffe1\073\uffe1\001\002\000\012" +
    "\006\126\032\124\060\125\061\130\001\002\000\012\006" +
    "\103\012\076\070\101\073\104\001\002\000\012\006\126" +
    "\032\124\060\125\061\130\001\002\000\026\006\103\012" +
    "\076\025\200\052\070\055\071\057\067\066\074\067\102" +
    "\070\101\073\153\001\002\000\022\010\uffca\011\uffca\012" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffd3\021\173\001\002" +
    "\000\004\073\161\001\002\000\004\017\156\001\002\000" +
    "\012\006\103\012\076\070\101\073\104\001\002\000\004" +
    "\010\154\001\002\000\030\004\045\006\103\012\076\052" +
    "\070\055\071\057\067\062\013\066\074\067\102\070\101" +
    "\073\073\001\002\000\024\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\056\uffcb\057\uffcb\001\002" +
    "\000\016\052\070\055\071\057\067\066\074\067\102\073" +
    "\121\001\002\000\012\006\103\012\076\070\101\073\104" +
    "\001\002\000\024\007\uffca\010\uffca\011\uffca\012\uffca\014" +
    "\uffca\015\uffca\016\uffca\056\uffca\057\uffca\001\002\000\016" +
    "\007\113\011\110\012\111\014\107\015\112\016\106\001" +
    "\002\000\012\006\103\012\076\070\101\073\104\001\002" +
    "\000\012\006\103\012\076\070\101\073\104\001\002\000" +
    "\012\006\103\012\076\070\101\073\104\001\002\000\012" +
    "\006\103\012\076\070\101\073\104\001\002\000\012\006" +
    "\103\012\076\070\101\073\104\001\002\000\024\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\056" +
    "\uffcd\057\uffcd\001\002\000\024\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\014\uffcf\015\uffcf\016\uffcf\056\uffcf\057\uffcf\001" +
    "\002\000\024\007\uffd1\010\uffd1\011\uffd1\012\uffd1\014\107" +
    "\015\112\016\106\056\uffd1\057\uffd1\001\002\000\024\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\014\107\015\112\016\106" +
    "\056\uffd2\057\uffd2\001\002\000\024\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\056\uffd0\057\uffd0" +
    "\001\002\000\024\007\uffce\010\uffce\011\uffce\012\uffce\014" +
    "\uffce\015\uffce\016\uffce\056\uffce\057\uffce\001\002\000\004" +
    "\017\uffd3\001\002\000\004\057\123\001\002\000\012\006" +
    "\126\032\124\060\125\061\130\001\002\000\012\006\126" +
    "\032\124\060\125\061\130\001\002\000\040\007\uffc1\010" +
    "\uffc1\034\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\052\uffc1\055\uffc1\056\uffc1\057\uffc1\066\uffc1\067\uffc1\073" +
    "\uffc1\001\002\000\012\006\126\032\124\060\125\061\130" +
    "\001\002\000\024\010\uffd9\034\132\041\131\042\134\043" +
    "\136\044\135\045\133\056\uffd9\057\uffd9\001\002\000\040" +
    "\007\uffc0\010\uffc0\034\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\052\uffc0\055\uffc0\056\uffc0\057\uffc0\066\uffc0" +
    "\067\uffc0\073\uffc0\001\002\000\012\006\126\032\124\060" +
    "\125\061\130\001\002\000\012\006\126\032\124\060\125" +
    "\061\130\001\002\000\012\006\126\032\124\060\125\061" +
    "\130\001\002\000\012\006\126\032\124\060\125\061\130" +
    "\001\002\000\012\006\126\032\124\060\125\061\130\001" +
    "\002\000\012\006\126\032\124\060\125\061\130\001\002" +
    "\000\040\007\uffc8\010\uffc8\034\132\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\052\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\066\uffc8\067\uffc8\073\uffc8\001\002\000\040\007\uffc7\010" +
    "\uffc7\034\132\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\052\uffc7\055\uffc7\056\uffc7\057\uffc7\066\uffc7\067\uffc7\073" +
    "\uffc7\001\002\000\040\007\uffc9\010\uffc9\034\132\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\052\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\066\uffc9\067\uffc9\073\uffc9\001\002\000\040" +
    "\007\uffc6\010\uffc6\034\132\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\052\uffc6\055\uffc6\056\uffc6\057\uffc6\066\uffc6" +
    "\067\uffc6\073\uffc6\001\002\000\040\007\uffc4\010\uffc4\034" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\052\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\066\uffc4\067\uffc4\073\uffc4\001" +
    "\002\000\040\007\uffc5\010\uffc5\034\132\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\052\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\066\uffc5\067\uffc5\073\uffc5\001\002\000\020\007\146" +
    "\034\132\041\131\042\134\043\136\044\135\045\133\001" +
    "\002\000\040\007\uffc3\010\uffc3\034\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\052\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\066\uffc3\067\uffc3\073\uffc3\001\002\000\040\007\uffc2" +
    "\010\uffc2\034\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\052\uffc2\055\uffc2\056\uffc2\057\uffc2\066\uffc2\067\uffc2" +
    "\073\uffc2\001\002\000\026\006\103\012\076\025\151\052" +
    "\070\055\071\057\067\066\074\067\102\070\101\073\153" +
    "\001\002\000\010\002\ufff6\004\ufff6\062\ufff6\001\002\000" +
    "\026\006\uffe2\012\uffe2\025\uffe2\052\uffe2\055\uffe2\057\uffe2" +
    "\066\uffe2\067\uffe2\070\uffe2\073\uffe2\001\002\000\020\010" +
    "\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca\017\uffd3" +
    "\001\002\000\026\006\uffdf\012\uffdf\025\uffdf\052\uffdf\055" +
    "\uffdf\057\uffdf\066\uffdf\067\uffdf\070\uffdf\073\uffdf\001\002" +
    "\000\024\007\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\056\uffcc\057\uffcc\001\002\000\012\006\103" +
    "\012\076\070\101\073\104\001\002\000\022\010\uffd4\011" +
    "\110\012\111\014\107\015\112\016\106\056\uffd4\057\uffd4" +
    "\001\002\000\010\010\uffde\056\uffde\057\uffde\001\002\000" +
    "\004\054\162\001\002\000\004\035\164\001\002\000\016" +
    "\052\070\055\071\057\067\066\074\067\102\073\121\001" +
    "\002\000\004\070\165\001\002\000\006\022\170\036\uffd5" +
    "\001\002\000\004\036\167\001\002\000\016\052\uffd7\055" +
    "\uffd7\057\uffd7\066\uffd7\067\uffd7\073\uffd7\001\002\000\004" +
    "\070\165\001\002\000\004\036\uffd6\001\002\000\010\010" +
    "\uffda\056\uffda\057\uffda\001\002\000\020\023\037\053\040" +
    "\070\017\071\023\074\021\075\024\076\022\001\002\000" +
    "\004\010\177\001\002\000\004\010\176\001\002\000\032" +
    "\004\ufff3\006\ufff3\012\ufff3\025\ufff3\052\ufff3\055\ufff3\057" +
    "\ufff3\062\ufff3\066\ufff3\067\ufff3\070\ufff3\073\ufff3\001\002" +
    "\000\032\004\ufff2\006\ufff2\012\ufff2\025\ufff2\052\ufff2\055" +
    "\ufff2\057\ufff2\062\ufff2\066\ufff2\067\ufff2\070\ufff2\073\ufff2" +
    "\001\002\000\010\002\ufff7\004\ufff7\062\ufff7\001\002\000" +
    "\032\034\132\041\131\042\134\043\136\044\135\045\133" +
    "\052\070\055\071\057\067\066\074\067\102\073\121\001" +
    "\002\000\010\010\uffdc\056\uffdc\057\uffdc\001\002\000\016" +
    "\052\070\055\071\057\067\066\074\067\102\073\121\001" +
    "\002\000\010\010\uffdd\056\uffdd\057\uffdd\001\002\000\022" +
    "\010\uffd8\011\110\012\111\014\107\015\112\016\106\056" +
    "\uffd8\057\uffd8\001\002\000\032\034\132\041\131\042\134" +
    "\043\136\044\135\045\133\052\070\055\071\057\067\066" +
    "\074\067\102\073\121\001\002\000\010\010\uffdb\056\uffdb" +
    "\057\uffdb\001\002\000\026\006\uffe0\012\uffe0\025\uffe0\052" +
    "\uffe0\055\uffe0\057\uffe0\066\uffe0\067\uffe0\070\uffe0\073\uffe0" +
    "\001\002\000\004\006\214\001\002\000\004\024\064\001" +
    "\002\000\010\002\ufff8\004\ufff8\062\ufff8\001\002\000\004" +
    "\073\215\001\002\000\004\021\216\001\002\000\004\070" +
    "\217\001\002\000\004\022\220\001\002\000\004\073\221" +
    "\001\002\000\004\021\222\001\002\000\004\023\223\001" +
    "\002\000\004\020\224\001\002\000\004\074\225\001\002" +
    "\000\004\007\226\001\002\000\004\024\064\001\002\000" +
    "\004\002\ufffb\001\002\000\004\002\001\001\002\000\006" +
    "\004\056\062\061\001\002\000\004\002\uffff\001\002\000" +
    "\010\002\ufffd\004\234\062\061\001\002\000\004\006\014" +
    "\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\014\002\006\012\005\013\004\020\011\022" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\047\020\231\022\230\001\001\000\002\001\001\000" +
    "\004\024\045\001\001\000\006\020\057\023\056\001\001" +
    "\000\002\001\001\000\004\024\014\001\001\000\006\024" +
    "\027\025\026\001\001\000\002\001\001\000\004\014\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\040\015" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\043\013\004\001\001\000\004\013\047\001\001" +
    "\000\004\024\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\052" +
    "\001\001\000\002\001\001\000\004\016\054\001\001\000" +
    "\002\001\001\000\004\024\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\061\001\001\000\004\007" +
    "\062\001\001\000\002\001\001\000\020\003\064\004\076" +
    "\005\074\010\065\011\071\012\077\013\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\205\001\001" +
    "\000\004\003\204\001\001\000\004\021\200\001\001\000" +
    "\012\003\064\004\076\005\074\010\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\154\001\001\000\002\001\001\000\016\003\064\004\076" +
    "\005\074\010\065\011\147\013\047\001\001\000\002\001" +
    "\001\000\006\004\121\005\074\001\001\000\004\003\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\117\001\001\000\004\003\116\001\001\000\004\003\115" +
    "\001\001\000\004\003\114\001\001\000\004\003\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\126\001\001" +
    "\000\004\021\146\001\001\000\002\001\001\000\004\021" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\143\001\001\000\004\021\142\001\001\000\004\021" +
    "\141\001\001\000\004\021\140\001\001\000\004\021\137" +
    "\001\001\000\004\021\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\064\004\076\005\074" +
    "\010\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\156\006\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\162\001\001\000\006" +
    "\004\171\005\074\001\001\000\004\027\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\174\015\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\201\005\074\001\001\000\002\001\001" +
    "\000\006\004\203\005\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\206\005\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\234" +
    "\023\056\001\001\000\004\022\232\001\001\000\004\023" +
    "\056\001\001\000\004\024\211\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DmParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DmParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DmParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    }

 

    public void report_error(String message, Object info) {
        StringBuffer msg = new StringBuffer("error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            msg.append(" in line ");
            msg.append(s.left);
        }
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_error(String message) {
        StringBuffer msg = new StringBuffer("error");
        System.err.println(msg);
    }

    public void report_error(String message, int line) {
        StringBuffer msg = new StringBuffer("error in line ");
        msg.append(line);
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
	throw new RuntimeException("Fatal Syntax Error");
    }

    public void syntax_error(Symbol cur_token) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(cur_token.left + 1))+"("+cur_token.right+")");
        System.err.println(msg);
    }

    public void syntax_error(int line, int column) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(line+1))+"("+column+")");
        System.err.println(msg);
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DmParser$actions {
  private final DmParser parser;

  /** Constructor */
  CUP$DmParser$actions(DmParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DmParser$do_action(
    int                        CUP$DmParser$act_num,
    java_cup.runtime.lr_parser CUP$DmParser$parser,
    java.util.Stack            CUP$DmParser$stack,
    int                        CUP$DmParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DmParser$result;

      /* select the action based on the action number */
      switch (CUP$DmParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprl ::= FALSE 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl 	Line:%d  Col:%d \n", strleft, strright); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprl ::= TRUE 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl 	Line:%d  Col:%d \n", strleft, strright); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprl ::= NOT exprl 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n",   eleft, eright); RESULT = new SyntAbstr(e, EnumTag.NOT); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exprl ::= LPAR exprl RPAR 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n",   eleft, eright); RESULT = e; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprl ::= exprl DIFF exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.DIFF); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprl ::= exprl EQ exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.EQ); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exprl ::= exprl LOR exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.LOR); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprl ::= exprl LAND exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.LAND); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprl ::= exprl OR exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.OR); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exprl ::= exprl AND exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl	Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.AND); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= ID 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr	Line:%d  Col:%d \n", tleft, tright); RESULT = new SyntAbstr(EnumTag.ID, t);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= INTEGER 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr 	Line:%d  Col:%d \n", strleft, strright); RESULT = new SyntAbstr(EnumTag.INTEGER, str); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= MINUS expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr  	Line:%d  Col:%d \n", eleft, eright); RESULT = new SyntAbstr(e, EnumTag.MINUS_U); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LPAR expr RPAR 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", eleft, eright); RESULT = e; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr MOD expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.MOD); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DIV expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.DIV); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr MULT expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.MULT); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MINUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr  	Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.MINUS); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr PLUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr	Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.PLUS); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lhs ::= ID 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** lhs\n"); RESULT = new SyntAbstr(EnumTag.ID, t);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("lhs",3, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rhs ::= expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** rhs\n");RESULT = e; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("rhs",4, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nbr ::= INTEGER 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** integer \n"); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("nbr",21, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nbr ::= INTEGER COMMA nbr 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr n = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** nbr \n"); RESULT = n; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("nbr",21, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list ::= LBRACKET nbr RBRACKET 
            {
              SyntAbstr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr n = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** LIST \n"); RESULT = n; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("list",20, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stm ::= RETURN expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT = e;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stm ::= REPEAT stm WHILE exprl 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT = e;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stm ::= FOREACH ID IN list stm 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr l = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT = i;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stm ::= WHILE exprl stm 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT =  new SyntAbstr(e, i, EnumTag.WHILE); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stm ::= IF exprl stm 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT = new SyntAbstr(e, i, EnumTag.IF); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stm ::= IF exprl stm THENELSE stm 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr i1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 /* RESULT = new SyntAbstr(e, EnumTag.IF, new SyntAbstr(i1, i2, EnumTag.THENELSE));*/  
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stm ::= lhs AFF rhs 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** stm\n"); RESULT = new SyntAbstr(e1, e2, EnumTag.AFF); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inst ::= stm SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** stm\n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("inst",6, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inst ::= expr SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** inst \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("inst",6, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrs ::= inst 
            {
              SyntAbstr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** inst \n"); RESULT = i; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrs ::= instrs inst 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** instrs \n" ); RESULT = i; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // strc ::= LCRO decls RCRO 
            {
              SyntAbstr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** strc \n"); RESULT = d; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("strc",12, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ctype ::= STRUCTURE strc 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** ctype \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("ctype",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ctype ::= LIST OF STRUCTURE strc 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** ctype \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("ctype",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ctype ::= LIST OF stype 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** ctype \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("ctype",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stype ::= BOOLEAN 
            {
              SyntAbstr RESULT =null;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stype ::= CHARACTER 
            {
              SyntAbstr RESULT =null;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stype ::= STRING 
            {
              SyntAbstr RESULT =null;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stype ::= FLOAT 
            {
              SyntAbstr RESULT =null;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stype ::= INTEGER 
            {
              SyntAbstr RESULT =null;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= ID TDOT ctype 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr c = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** param \n"); RESULT = c;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= ID TDOT stype 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** param \n"); RESULT = s;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // params ::= LPAR param RPAR 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** params \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // params ::= LPAR params COMMA param RPAR 
            {
              SyntAbstr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** params \n"); RESULT = s;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= PROCEDURE params SEMIC 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** decl \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decl",9, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl ::= FUNCTION params TDOT stype SEMIC 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** decl \n"); RESULT = s;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decl",9, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= ID TDOT ctype SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr c = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** decl \n"); RESULT = c;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decl",9, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl ::= ID TDOT stype SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** decl \n"); RESULT = s;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decl",9, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decls ::= decl 
            {
              SyntAbstr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** decls \n"); RESULT = d;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decls",8, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decls ::= decls decl 
            {
              SyntAbstr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** decls \n"); 	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decls",8, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloc ::= LCRO decls instrs RCRO 
            {
              SyntAbstr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** bloc \n"); RESULT = i; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("bloc",5, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloc ::= LCRO instrs RCRO 
            {
              SyntAbstr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** bloc \n"); RESULT = i; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("bloc",5, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fct ::= PROCEDURE params bloc 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr b = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** PROCEDURE \n"); RESULT = b; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("fct",17, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fct ::= FUNCTION params bloc 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr b = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** FUNCTION \n"); RESULT = b; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("fct",17, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fcts ::= fcts fct 
            {
              SyntAbstr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr f = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** fcts \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("fcts",16, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pprog ::= PROCEDURE MAIN LPAR ID TDOT INTEGER COMMA ID TDOT LIST OF STRING RPAR bloc 
            {
              SyntAbstr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr b = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** pprog \n"); RESULT = b;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("pprog",14, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-13)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= decls fcts pprog 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr f = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= decls pprog fcts 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr f = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = f;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= fcts pprog 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr f = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // axiom ::= decls pprog 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= pprog 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		RESULT = start_val;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DmParser$parser.done_parsing();
          return CUP$DmParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

