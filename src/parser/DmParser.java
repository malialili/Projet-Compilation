
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 05 15:33:03 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import java.lang.*;
import stree.*;
import type.*;
import env.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 05 15:33:03 CET 2014
  */
public class DmParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DmParser() {super();}

  /** Constructor which sets the default scanner. */
  public DmParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DmParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\002\005" +
    "\000\002\020\020\000\002\022\004\000\002\022\003\000" +
    "\002\023\006\000\002\023\005\000\002\007\005\000\002" +
    "\007\006\000\002\013\004\000\002\013\003\000\002\014" +
    "\006\000\002\014\006\000\002\014\007\000\002\014\005" +
    "\000\002\024\007\000\002\024\005\000\002\025\005\000" +
    "\002\025\005\000\002\030\005\000\002\030\003\000\002" +
    "\012\003\000\002\012\004\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\005\000\002\016\006\000\002\016\004\000" +
    "\002\017\005\000\002\011\004\000\002\011\003\000\002" +
    "\010\004\000\002\010\003\000\002\004\005\000\002\004" +
    "\007\000\002\004\005\000\002\004\005\000\002\004\007" +
    "\000\002\004\006\000\002\004\007\000\002\004\005\000" +
    "\002\026\005\000\002\027\005\000\002\027\003\000\002" +
    "\006\004\000\002\005\003\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\004\000\002\021\003" +
    "\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\012\004\004\051\005\061\014\074\007\001" +
    "\002\000\006\005\235\006\037\001\002\000\004\074\254" +
    "\001\002\000\006\004\233\061\073\001\002\000\010\007" +
    "\uffe8\021\uffe8\022\uffe8\001\002\000\010\002\ufff9\004\ufff9" +
    "\061\ufff9\001\002\000\004\002\252\001\002\000\034\004" +
    "\ufff3\006\ufff3\012\ufff3\025\ufff3\051\ufff3\053\ufff3\056\ufff3" +
    "\060\ufff3\061\ufff3\065\ufff3\066\ufff3\067\ufff3\074\ufff3\001" +
    "\002\000\004\002\000\001\002\000\006\006\037\074\074" +
    "\001\002\000\012\004\004\051\005\061\014\074\007\001" +
    "\002\000\004\021\017\001\002\000\020\023\025\054\026" +
    "\067\022\070\030\075\024\076\023\077\021\001\002\000" +
    "\004\010\066\001\002\000\006\007\uffe3\010\uffe3\001\002" +
    "\000\006\007\uffe6\010\uffe6\001\002\000\006\007\uffe2\010" +
    "\uffe2\001\002\000\006\007\uffe4\010\uffe4\001\002\000\004" +
    "\020\062\001\002\000\004\024\033\001\002\000\004\010" +
    "\031\001\002\000\006\007\uffe5\010\uffe5\001\002\000\034" +
    "\004\ufff2\006\ufff2\012\ufff2\025\ufff2\051\ufff2\053\ufff2\056" +
    "\ufff2\060\ufff2\061\ufff2\065\ufff2\066\ufff2\067\ufff2\074\ufff2" +
    "\001\002\000\006\007\uffdf\010\uffdf\001\002\000\012\004" +
    "\035\051\005\061\036\074\007\001\002\000\014\004\035" +
    "\025\061\051\005\061\036\074\007\001\002\000\004\006" +
    "\037\001\002\000\004\006\037\001\002\000\010\006\037" +
    "\051\005\074\007\001\002\000\004\021\041\001\002\000" +
    "\014\067\022\070\030\075\024\076\023\077\021\001\002" +
    "\000\004\010\043\001\002\000\034\004\ufff0\006\ufff0\012" +
    "\ufff0\025\ufff0\051\ufff0\053\ufff0\056\ufff0\060\ufff0\061\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\074\ufff0\001\002\000\004\021" +
    "\053\001\002\000\004\022\050\001\002\000\004\007\047" +
    "\001\002\000\012\010\uffed\021\uffed\022\uffed\024\uffed\001" +
    "\002\000\006\051\005\074\007\001\002\000\004\007\052" +
    "\001\002\000\012\010\uffee\021\uffee\022\uffee\024\uffee\001" +
    "\002\000\020\023\025\054\026\067\022\070\030\075\024" +
    "\076\023\077\021\001\002\000\004\007\uffeb\001\002\000" +
    "\004\007\uffec\001\002\000\004\010\057\001\002\000\034" +
    "\004\uffef\006\uffef\012\uffef\025\uffef\051\uffef\053\uffef\056" +
    "\uffef\060\uffef\061\uffef\065\uffef\066\uffef\067\uffef\074\uffef" +
    "\001\002\000\034\004\ufff4\006\ufff4\012\ufff4\025\ufff4\051" +
    "\ufff4\053\ufff4\056\ufff4\060\ufff4\061\ufff4\065\ufff4\066\ufff4" +
    "\067\ufff4\074\ufff4\001\002\000\006\007\uffde\010\uffde\001" +
    "\002\000\016\054\064\067\022\070\030\075\024\076\023" +
    "\077\021\001\002\000\006\007\uffe1\010\uffe1\001\002\000" +
    "\004\024\033\001\002\000\006\007\uffe0\010\uffe0\001\002" +
    "\000\034\004\ufff1\006\ufff1\012\ufff1\025\ufff1\051\ufff1\053" +
    "\ufff1\056\ufff1\060\ufff1\061\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\074\ufff1\001\002\000\006\004\233\061\073\001\002\000" +
    "\010\002\uffff\004\071\061\073\001\002\000\004\006\037" +
    "\001\002\000\010\002\ufffd\004\071\061\073\001\002\000" +
    "\004\074\074\001\002\000\004\006\037\001\002\000\004" +
    "\024\077\001\002\000\010\002\ufff8\004\ufff8\061\ufff8\001" +
    "\002\000\032\004\035\006\116\012\111\051\005\053\103" +
    "\056\104\060\102\061\036\065\107\066\115\067\114\074" +
    "\106\001\002\000\016\010\227\011\123\012\124\014\122" +
    "\015\125\016\121\001\002\000\026\006\uffdc\012\uffdc\025" +
    "\uffdc\053\uffdc\056\uffdc\060\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\074\uffdc\001\002\000\014\006\142\032\140\072\141\073" +
    "\144\074\137\001\002\000\012\006\116\012\111\067\114" +
    "\074\117\001\002\000\014\006\142\032\140\072\141\073" +
    "\144\074\137\001\002\000\026\006\116\012\111\025\216" +
    "\053\103\056\104\060\102\065\107\066\115\067\114\074" +
    "\176\001\002\000\024\006\164\010\uffc4\011\uffc4\012\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffcd\021\uffe8\001\002\000" +
    "\004\074\204\001\002\000\004\017\200\001\002\000\012" +
    "\006\116\012\111\067\114\074\117\001\002\000\026\006" +
    "\uffda\012\uffda\025\uffda\053\uffda\056\uffda\060\uffda\065\uffda" +
    "\066\uffda\067\uffda\074\uffda\001\002\000\032\004\035\006" +
    "\116\012\111\051\005\053\103\056\104\060\102\061\036" +
    "\065\107\066\115\067\114\074\106\001\002\000\020\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\001\002\000\016\053\103\056\104\060\102\065\107\066" +
    "\115\074\134\001\002\000\012\006\116\012\111\067\114" +
    "\074\117\001\002\000\020\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\001\002\000\016\007\126" +
    "\011\123\012\124\014\122\015\125\016\121\001\002\000" +
    "\012\006\116\012\111\067\114\074\117\001\002\000\012" +
    "\006\116\012\111\067\114\074\117\001\002\000\012\006" +
    "\116\012\111\067\114\074\117\001\002\000\012\006\116" +
    "\012\111\067\114\074\117\001\002\000\012\006\116\012" +
    "\111\067\114\074\117\001\002\000\020\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\001\002\000" +
    "\020\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\001\002\000\020\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\014\122\015\125\016\121\001\002\000\020\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\014\122\015\125\016\121\001" +
    "\002\000\020\007\uffca\010\uffca\011\uffca\012\uffca\014\uffca" +
    "\015\uffca\016\uffca\001\002\000\020\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\001\002\000\006" +
    "\006\164\017\uffcd\001\002\000\004\060\136\001\002\000" +
    "\014\006\142\032\140\072\141\073\144\074\137\001\002" +
    "\000\046\006\uffb9\007\uffb9\012\uffb9\025\uffb9\034\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\053\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\065\uffb9\066\uffb9\067\uffb9\074\uffb9\001" +
    "\002\000\014\006\142\032\140\072\141\073\144\074\137" +
    "\001\002\000\046\006\uffbb\007\uffbb\012\uffbb\025\uffbb\034" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\053\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\065\uffbb\066\uffbb\067\uffbb\074" +
    "\uffbb\001\002\000\014\006\142\032\140\072\141\073\144" +
    "\074\137\001\002\000\044\006\uffd4\012\uffd4\025\uffd4\034" +
    "\146\041\145\042\150\043\152\044\151\045\147\053\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\065\uffd4\066\uffd4\067\uffd4\074" +
    "\uffd4\001\002\000\046\006\uffba\007\uffba\012\uffba\025\uffba" +
    "\034\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\053" +
    "\uffba\056\uffba\057\uffba\060\uffba\065\uffba\066\uffba\067\uffba" +
    "\074\uffba\001\002\000\014\006\142\032\140\072\141\073" +
    "\144\074\137\001\002\000\014\006\142\032\140\072\141" +
    "\073\144\074\137\001\002\000\014\006\142\032\140\072" +
    "\141\073\144\074\137\001\002\000\014\006\142\032\140" +
    "\072\141\073\144\074\137\001\002\000\014\006\142\032" +
    "\140\072\141\073\144\074\137\001\002\000\014\006\142" +
    "\032\140\072\141\073\144\074\137\001\002\000\046\006" +
    "\uffc2\007\uffc2\012\uffc2\025\uffc2\034\146\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\053\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\065\uffc2\066\uffc2\067\uffc2\074\uffc2\001\002\000\046" +
    "\006\uffc1\007\uffc1\012\uffc1\025\uffc1\034\146\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\053\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\065\uffc1\066\uffc1\067\uffc1\074\uffc1\001\002\000" +
    "\046\006\uffc3\007\uffc3\012\uffc3\025\uffc3\034\146\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\053\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\065\uffc3\066\uffc3\067\uffc3\074\uffc3\001\002" +
    "\000\046\006\uffc0\007\uffc0\012\uffc0\025\uffc0\034\146\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\053\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\065\uffc0\066\uffc0\067\uffc0\074\uffc0\001" +
    "\002\000\046\006\uffbe\007\uffbe\012\uffbe\025\uffbe\034\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\053\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\065\uffbe\066\uffbe\067\uffbe\074\uffbe" +
    "\001\002\000\046\006\uffbf\007\uffbf\012\uffbf\025\uffbf\034" +
    "\146\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\053\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\065\uffbf\066\uffbf\067\uffbf\074" +
    "\uffbf\001\002\000\020\007\162\034\146\041\145\042\150" +
    "\043\152\044\151\045\147\001\002\000\046\006\uffbd\007" +
    "\uffbd\012\uffbd\025\uffbd\034\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\053\uffbd\056\uffbd\057\uffbd\060\uffbd\065" +
    "\uffbd\066\uffbd\067\uffbd\074\uffbd\001\002\000\046\006\uffbc" +
    "\007\uffbc\012\uffbc\025\uffbc\034\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\053\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\074\uffbc\001\002\000\006\051" +
    "\005\074\007\001\002\000\006\007\uffe9\022\uffe9\001\002" +
    "\000\006\007\170\022\167\001\002\000\006\051\005\074" +
    "\007\001\002\000\004\010\171\001\002\000\030\006\uffd3" +
    "\012\uffd3\025\uffd3\053\uffd3\056\uffd3\057\uffd3\060\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\074\uffd3\001\002\000\006\007\uffea" +
    "\022\uffea\001\002\000\026\006\116\012\111\025\174\053" +
    "\103\056\104\060\102\065\107\066\115\067\114\074\176" +
    "\001\002\000\010\002\ufff5\004\ufff5\061\ufff5\001\002\000" +
    "\026\006\uffdd\012\uffdd\025\uffdd\053\uffdd\056\uffdd\060\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\074\uffdd\001\002\000\022\006" +
    "\164\010\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffcd\001\002\000\020\007\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\001\002\000\012\006\116" +
    "\012\111\067\114\074\117\001\002\000\016\010\203\011" +
    "\123\012\124\014\122\015\125\016\121\001\002\000\030" +
    "\006\uffd9\012\uffd9\025\uffd9\053\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\074\uffd9\001\002\000\030" +
    "\006\uffce\012\uffce\025\uffce\053\uffce\056\uffce\057\uffce\060" +
    "\uffce\065\uffce\066\uffce\067\uffce\074\uffce\001\002\000\004" +
    "\055\205\001\002\000\004\035\207\001\002\000\016\053" +
    "\103\056\104\060\102\065\107\066\115\074\134\001\002" +
    "\000\004\067\210\001\002\000\006\022\213\036\uffcf\001" +
    "\002\000\004\036\212\001\002\000\016\053\uffd1\056\uffd1" +
    "\060\uffd1\065\uffd1\066\uffd1\074\uffd1\001\002\000\004\067" +
    "\210\001\002\000\004\036\uffd0\001\002\000\030\006\uffd5" +
    "\012\uffd5\025\uffd5\053\uffd5\056\uffd5\057\uffd5\060\uffd5\065" +
    "\uffd5\066\uffd5\067\uffd5\074\uffd5\001\002\000\010\002\ufff6" +
    "\004\ufff6\061\ufff6\001\002\000\032\034\146\041\145\042" +
    "\150\043\152\044\151\045\147\053\103\056\104\060\102" +
    "\065\107\066\115\074\134\001\002\000\030\006\uffd7\012" +
    "\uffd7\025\uffd7\053\uffd7\056\uffd7\057\221\060\uffd7\065\uffd7" +
    "\066\uffd7\067\uffd7\074\uffd7\001\002\000\016\053\103\056" +
    "\104\060\102\065\107\066\115\074\134\001\002\000\030" +
    "\006\uffd8\012\uffd8\025\uffd8\053\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\074\uffd8\001\002\000\016" +
    "\010\224\011\123\012\124\014\122\015\125\016\121\001" +
    "\002\000\030\006\uffd2\012\uffd2\025\uffd2\053\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\065\uffd2\066\uffd2\067\uffd2\074\uffd2\001" +
    "\002\000\032\034\146\041\145\042\150\043\152\044\151" +
    "\045\147\053\103\056\104\060\102\065\107\066\115\074" +
    "\134\001\002\000\030\006\uffd6\012\uffd6\025\uffd6\053\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\065\uffd6\066\uffd6\067\uffd6\074" +
    "\uffd6\001\002\000\026\006\uffdb\012\uffdb\025\uffdb\053\uffdb" +
    "\056\uffdb\060\uffdb\065\uffdb\066\uffdb\067\uffdb\074\uffdb\001" +
    "\002\000\010\002\ufffa\004\ufffa\061\ufffa\001\002\000\004" +
    "\024\077\001\002\000\010\002\ufff7\004\ufff7\061\ufff7\001" +
    "\002\000\006\005\235\006\037\001\002\000\004\002\ufffc" +
    "\001\002\000\004\006\236\001\002\000\004\074\237\001" +
    "\002\000\004\021\240\001\002\000\004\067\241\001\002" +
    "\000\004\022\242\001\002\000\004\074\243\001\002\000" +
    "\004\021\244\001\002\000\004\023\245\001\002\000\004" +
    "\020\246\001\002\000\004\075\247\001\002\000\004\007" +
    "\250\001\002\000\004\024\077\001\002\000\010\002\ufffb" +
    "\004\ufffb\061\ufffb\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufffe\001\002\000\010\007\uffe7\021\uffe7\022\uffe7" +
    "\001\002\000\006\010\057\024\077\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\020\002\010\012\015\013\014\014\011\020" +
    "\012\022\005\023\007\001\001\000\004\024\254\001\001" +
    "\000\002\001\001\000\006\020\252\023\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\037\001\001\000" +
    "\014\012\015\014\057\020\067\022\066\023\007\001\001" +
    "\000\002\001\001\000\006\015\026\016\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\015\013\033\014" +
    "\011\001\001\000\006\012\015\014\057\001\001\000\004" +
    "\024\055\001\001\000\004\024\037\001\001\000\010\012" +
    "\043\024\044\025\045\001\001\000\002\001\001\000\004" +
    "\015\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\043\025\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\054\016\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\062\001\001\000\002\001\001\000\004\017\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\233" +
    "\023\227\001\001\000\006\022\071\023\007\001\001\000" +
    "\004\024\230\001\001\000\004\023\227\001\001\000\002" +
    "\001\001\000\004\024\074\001\001\000\004\007\075\001" +
    "\001\000\002\001\001\000\022\003\077\004\111\005\107" +
    "\010\100\011\104\012\015\013\112\014\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\224\001\001" +
    "\000\004\003\222\001\001\000\004\021\216\001\001\000" +
    "\012\003\077\004\111\005\107\010\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\176\001\001\000\002\001\001\000\020\003\077\004\111" +
    "\005\107\010\100\011\172\012\015\014\057\001\001\000" +
    "\002\001\001\000\006\004\134\005\107\001\001\000\004" +
    "\003\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\132\001\001\000\004\003\131\001\001\000\004" +
    "\003\130\001\001\000\004\003\127\001\001\000\004\003" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\142" +
    "\001\001\000\002\001\001\000\004\021\162\001\001\000" +
    "\002\001\001\000\004\021\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\157\001\001\000\004\021" +
    "\156\001\001\000\004\021\155\001\001\000\004\021\154" +
    "\001\001\000\004\021\153\001\001\000\004\021\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\164\030\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\077\004\111\005" +
    "\107\010\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\200\006" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\205\001\001\000" +
    "\006\004\214\005\107\001\001\000\004\027\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\217\005\107\001\001\000" +
    "\002\001\001\000\006\004\221\005\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\225\005\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\231\001\001\000\002\001" +
    "\001\000\004\024\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\231\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DmParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DmParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DmParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    }

 

    public void report_error(String message, Object info) {
        StringBuffer msg = new StringBuffer("error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            msg.append(" in line ");
            msg.append(s.left);
        }
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_error(String message) {
        StringBuffer msg = new StringBuffer("error");
        System.err.println(msg);
    }

    public void report_error(String message, int line) {
        StringBuffer msg = new StringBuffer("error in line ");
        msg.append(line);
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
	throw new RuntimeException("Fatal Syntax Error");
    }

    public void syntax_error(Symbol cur_token) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(cur_token.left + 1))+"("+cur_token.right+")");
        System.err.println(msg);
    }

    public void syntax_error(int line, int column) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(line+1))+"("+column+")");
        System.err.println(msg);
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DmParser$actions {
  private final DmParser parser;

  /** Constructor */
  CUP$DmParser$actions(DmParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DmParser$do_action(
    int                        CUP$DmParser$act_num,
    java_cup.runtime.lr_parser CUP$DmParser$parser,
    java.util.Stack            CUP$DmParser$stack,
    int                        CUP$DmParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DmParser$result;

      /* select the action based on the action number */
      switch (CUP$DmParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exprl ::= ID 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl	Line:%d  Col:%d \n", tleft, tright); RESULT = new SyntAbstr(EnumTag.ID, t);
								new Type(EnumType.VARIABLE);
							
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exprl ::= FALSE 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl 	Line:%d  Col:%d \n", strleft, strright); RESULT = new SyntAbstr(EnumTag.FALSE, str);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exprl ::= TRUE 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl 	Line:%d  Col:%d \n", strleft, strright); RESULT = new SyntAbstr(EnumTag.TRUE, str);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exprl ::= NOT exprl 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n",   eleft, eright); RESULT = new SyntAbstr(e, EnumTag.NOT); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exprl ::= LPAR exprl RPAR 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n",   eleft, eright); RESULT = e; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exprl ::= exprl DIFF exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.DIFF); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprl ::= exprl EQ exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.EQ); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprl ::= exprl LOR exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.LOR); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprl ::= exprl LAND exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.LAND); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprl ::= exprl OR exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl  Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.OR); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exprl ::= exprl AND exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***exprl	Line:%d  Col:%d \n", e1left, e1right); 
								RESULT = new SyntAbstr(e1, e2, EnumTag.AND); 
							
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",15, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= ID 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr	Line:%d  Col:%d \n", tleft, tright); RESULT = new SyntAbstr(EnumTag.ID, t);
								new Type(EnumType.VARIABLE);
							
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= INTEGER 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr 	Line:%d  Col:%d \n", strleft, strright); 
								RESULT = new SyntAbstr(EnumTag.INTEGER, str);
								new Type(EnumType.INTEGER);
							
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= MINUS expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr  	Line:%d  Col:%d \n", eleft, eright); RESULT = new SyntAbstr(e, EnumTag.MINUS_U); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= LPAR expr RPAR 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", eleft, eright); RESULT = e; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr MOD expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.MOD); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr DIV expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.DIV); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr MULT expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.MULT); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr MINUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr  	Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.MINUS); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr PLUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr	Line:%d  Col:%d \n", e1left, e1right); 
								RESULT = new SyntAbstr(e1, e2, EnumTag.PLUS); 
								System.out.printf(" "+e1.getType());
								
								/*if ( (e1.getType() == INTEGER) && (e2.getType()==INTEGER) )
									RESULT.putType(INTEGER);
								else if ( e1.getType() == FLOAT || e2.getType() == FLOAT )
									RESULT.putType( FLOAT );
								else RESULT.putType( ERROR );	*/
						
								
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lhs ::= ID 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** lhs\n"); RESULT = new SyntAbstr(EnumTag.ID, t);
				new Type(EnumType.VARIABLE);
			
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("lhs",3, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rhs ::= expr SEMIC 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** rhs\n");RESULT = e; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("rhs",4, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nbr ::= INTEGER 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** integer \n"); new Type(EnumType.INTEGER); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("nbr",21, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nbr ::= INTEGER COMMA nbr 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr n = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** nbr \n"); RESULT = n; new Type(EnumType.INTEGER); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("nbr",21, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list ::= LBRACKET nbr RBRACKET 
            {
              SyntAbstr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr n = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** LIST \n"); RESULT = n; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("list",20, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stm ::= RETURN expr SEMIC 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		  RESULT = e;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stm ::= ID LPAR vars RPAR SEMIC 
            {
              SyntAbstr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		  RESULT = new SyntAbstr(s, EnumTag.FUNCTION); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stm ::= REPEAT stm WHILE exprl 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT = e;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stm ::= FOREACH ID IN list stm 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr l = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT = i;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stm ::= WHILE exprl stm 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT =  new SyntAbstr(e, i, EnumTag.WHILE); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stm ::= IF exprl stm 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** IF \n");   RESULT = new SyntAbstr(e, i, EnumTag.IF); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stm ::= IF exprl stm ELSE stm 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr i1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** ELSE \n"); RESULT = new SyntAbstr(e, new SyntAbstr(i1, i2, EnumTag.ELSE ), EnumTag.IF);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stm ::= lhs AFF rhs 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** stm\n"); RESULT = new SyntAbstr(e1, e2, EnumTag.AFF); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inst ::= stm 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** stm\n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("inst",6, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inst ::= expr SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** inst \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("inst",6, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrs ::= inst 
            {
              SyntAbstr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** inst \n"); RESULT = i; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrs ::= instrs inst 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** instrs \n" ); RESULT = i; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // strc ::= LCRO decls RCRO 
            {
              SyntAbstr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** strc \n"); RESULT = d; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("strc",13, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ctype ::= STRUCTURE strc 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		new Type(EnumType.STRUCTURE); System.err.printf("*** ctype \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("ctype",12, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ctype ::= LIST OF STRUCTURE strc 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		new Type(EnumType.LIST); System.err.printf("*** ctype \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("ctype",12, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ctype ::= LIST OF stype 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		new Type(EnumType.LIST); System.err.printf("*** ctype \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("ctype",12, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stype ::= BOOLEAN 
            {
              SyntAbstr RESULT =null;
		 new Type(EnumType.BOOLEAN);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stype ::= CHARACTER 
            {
              SyntAbstr RESULT =null;
		 new Type(EnumType.CHARACTER);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stype ::= STRING 
            {
              SyntAbstr RESULT =null;
		 new Type(EnumType.STRING);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stype ::= FLOAT 
            {
              SyntAbstr RESULT =null;
		 new Type(EnumType.FLOAT);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stype ::= INTEGER 
            {
              SyntAbstr RESULT =null;
		 new Type(EnumType.INTEGER);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stype",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var ::= CIRCUMFLEX ID 
            {
              SyntAbstr RESULT =null;
			System.err.printf("*** var \n"); new Type(EnumType.VARIABLE);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var ::= ID 
            {
              SyntAbstr RESULT =null;
			System.err.printf("*** var \n"); new Type(EnumType.VARIABLE);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vars ::= var 
            {
              SyntAbstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr v = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** param \n"); RESULT = v;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("vars",22, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vars ::= vars COMMA var 
            {
              SyntAbstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr v = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** param \n"); RESULT = v;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("vars",22, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= var TDOT ctype 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr c = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** param \n"); RESULT = c;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= var TDOT stype 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** param \n"); RESULT = s;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // params ::= LPAR param RPAR 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** params \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // params ::= LPAR params COMMA param RPAR 
            {
              SyntAbstr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** params \n"); RESULT = s;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl ::= PROCEDURE params SEMIC 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** decl \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= FUNCTION params TDOT stype SEMIC 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** decl \n"); RESULT = s;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl ::= var TDOT ctype SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr c = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** decl \n"); RESULT = c;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= var TDOT stype SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
			System.err.printf("*** decl \n"); RESULT = s; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decls ::= decl 
            {
              SyntAbstr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** decls \n"); RESULT = d;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decls",9, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decls ::= decls decl 
            {
              SyntAbstr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** decls \n"); 	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decls",9, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloc ::= LCRO decls instrs RCRO 
            {
              SyntAbstr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** bloc \n"); RESULT = i; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("bloc",5, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloc ::= LCRO instrs RCRO 
            {
              SyntAbstr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** bloc \n"); RESULT = i; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("bloc",5, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fct ::= PROCEDURE params bloc 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr b = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** PROCEDURE \n"); RESULT = b; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("fct",17, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fct ::= FUNCTION ID params bloc 
            {
              SyntAbstr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr b = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** FUNCTION \n"); RESULT = b; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("fct",17, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fcts ::= fct 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** fcts \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("fcts",16, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fcts ::= fcts fct 
            {
              SyntAbstr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr f = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** fcts \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("fcts",16, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pprog ::= PROCEDURE MAIN LPAR ID TDOT INTEGER COMMA ID TDOT LIST OF STRING RPAR bloc 
            {
              SyntAbstr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr b = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** pprog \n"); RESULT = b;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("pprog",14, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-13)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= decls fcts pprog 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr f = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= decls pprog fcts 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr f = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = f;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= fcts pprog 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr f = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // axiom ::= decls pprog 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= pprog 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***axiom \n"); RESULT = p;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		RESULT = start_val;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DmParser$parser.done_parsing();
          return CUP$DmParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

