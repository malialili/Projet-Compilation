
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 26 11:27:31 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import java.lang.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 26 11:27:31 CET 2014
  */
public class DmParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DmParser() {super();}

  /** Constructor which sets the default scanner. */
  public DmParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DmParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\003\020\000\002\007" +
    "\005\000\002\011\004\000\002\011\003\000\002\010\004" +
    "\000\002\010\004\000\002\004\005\000\002\006\003\000" +
    "\002\005\003\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\004\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\004\005\001\002\000\004\002\057\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\072\010\001\002\000\004\021\011\001\002\000" +
    "\004\067\012\001\002\000\004\022\013\001\002\000\004" +
    "\072\014\001\002\000\004\021\015\001\002\000\004\023" +
    "\016\001\002\000\004\020\017\001\002\000\004\073\020" +
    "\001\002\000\004\007\021\001\002\000\004\024\023\001" +
    "\002\000\004\002\000\001\002\000\012\006\030\012\024" +
    "\067\025\072\032\001\002\000\010\006\030\012\024\067" +
    "\025\001\002\000\016\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\014\ufff1\015\ufff1\001\002\000\004\025\055\001\002\000" +
    "\004\017\052\001\002\000\010\006\030\012\024\067\025" +
    "\001\002\000\014\006\030\012\024\025\ufffd\067\025\072" +
    "\032\001\002\000\004\017\ufff8\001\002\000\014\010\041" +
    "\011\037\012\040\014\036\015\042\001\002\000\004\010" +
    "\035\001\002\000\014\006\ufffb\012\ufffb\025\ufffb\067\ufffb" +
    "\072\ufffb\001\002\000\010\006\030\012\024\067\025\001" +
    "\002\000\010\006\030\012\024\067\025\001\002\000\010" +
    "\006\030\012\024\067\025\001\002\000\014\006\ufffc\012" +
    "\ufffc\025\ufffc\067\ufffc\072\ufffc\001\002\000\010\006\030" +
    "\012\024\067\025\001\002\000\016\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\014\ufff4\015\ufff4\001\002\000\016\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\014\036\015\042\001\002\000" +
    "\016\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\036\015\042" +
    "\001\002\000\016\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014" +
    "\ufff5\015\ufff5\001\002\000\004\025\ufffe\001\002\000\014" +
    "\007\051\011\037\012\040\014\036\015\042\001\002\000" +
    "\016\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3" +
    "\001\002\000\010\006\030\012\024\067\025\001\002\000" +
    "\014\010\ufff9\011\037\012\040\014\036\015\042\001\002" +
    "\000\004\010\ufffa\001\002\000\004\002\uffff\001\002\000" +
    "\016\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\021\001" +
    "\001\000\002\001\001\000\014\002\032\004\033\005\026" +
    "\010\030\011\025\001\001\000\004\002\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\047\001\001\000\014\002\032\004\033\005\026\010" +
    "\030\011\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\045\001" +
    "\001\000\004\002\044\001\001\000\004\002\043\001\001" +
    "\000\002\001\001\000\004\002\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\052\006\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DmParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DmParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DmParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     

     public void syntax_error(Symbol cur_token)	{
	System.err.printf("Error!!!!!!!!!! at Line: %d Col: %d\n",cur_token.left, cur_token.right );
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DmParser$actions {
  private final DmParser parser;

  /** Constructor */
  CUP$DmParser$actions(DmParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DmParser$do_action(
    int                        CUP$DmParser$act_num,
    java_cup.runtime.lr_parser CUP$DmParser$parser,
    java.util.Stack            CUP$DmParser$stack,
    int                        CUP$DmParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DmParser$result;

      /* select the action based on the action number */
      switch (CUP$DmParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= INTEGER 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 
	    System.err.printf("***expr Line:%d  Col:%d \n", strleft, strright);
	    RESULT = new SyntAbstr(EnumTag.INTEGER, str); 
	    
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= MINUS expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 
	 System.err.printf("***expr  Line:%d  Col:%d \n", eleft, eright);
	 RESULT = new SyntAbstr(e, EnumTag.MINUS_U); 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= LPAR expr RPAR 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 
	 System.err.printf("***expr   Line:%d  Col:%d \n", eleft, eright);
	 RESULT = e; 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr DIV expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		   
	 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right);
	 RESULT = new SyntAbstr(e1, e2, EnumTag.DIV); 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr MULT expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		   
	 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right);
	 RESULT = new SyntAbstr(e1, e2, EnumTag.MULT); 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr MINUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 
	 System.err.printf("***expr  Line:%d  Col:%d \n", e1left, e1right);
	 RESULT = new SyntAbstr(e1, e2, EnumTag.MINUS); 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr PLUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 
	 System.err.printf("***expr\n");
	 RESULT = new SyntAbstr(e1, e2, EnumTag.PLUS); 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lhs ::= TOK_ID 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 
	 System.err.printf("***axiom\n");
/*	RESULT = new SyntAbstr(EnumTag.TOK_ID, t);*/
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("lhs",3, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rhs ::= expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 
	 System.err.printf("***axiom\n");
	 RESULT = e; 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("rhs",4, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stm ::= lhs AFF rhs 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 
	 System.err.printf("***stm\n");
	 RESULT = new SyntAbstr(e1, e2, EnumTag.AFF); 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inst ::= stm SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 
	 System.err.printf("***axiom\n");
	 RESULT = t; 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("inst",6, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inst ::= expr SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 
	 System.err.printf("***axiom\n");
	 RESULT = t; 
	 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("inst",6, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrs ::= inst 
            {
              SyntAbstr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			RESULT = i;	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrs ::= inst instrs 
            {
              SyntAbstr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloc ::= LCRO instrs RCRO 
            {
              SyntAbstr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		  /*  bloc  */ 
	 RESULT = i;
	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("bloc",5, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= PROCEDURE MAIN LPAR TOK_ID TDOT INTEGER COMMA TOK_ID TDOT LIST OF STRING RPAR bloc 
            {
              SyntAbstr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr b = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  /*  programme principal */ 
	 RESULT = b;
	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-13)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr start_val = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		RESULT = start_val;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DmParser$parser.done_parsing();
          return CUP$DmParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

