
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 27 18:01:52 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import java.lang.*;
import stree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 27 18:01:52 CET 2014
  */
public class DmParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DmParser() {super();}

  /** Constructor which sets the default scanner. */
  public DmParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DmParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\017\020\000\002\007\005\000\002\007\006" +
    "\000\002\012\004\000\002\012\003\000\002\013\006\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\014\005\000\002\014\003\000\002\011" +
    "\004\000\002\011\003\000\002\010\004\000\002\010\004" +
    "\000\002\004\005\000\002\004\007\000\002\004\005\000" +
    "\002\004\005\000\002\004\006\000\002\006\003\000\002" +
    "\005\003\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\020\005\000\002\020\005\000" +
    "\002\020\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\006\004\010\072\004\001\002\000\006\021" +
    "\ufff3\022\076\001\002\000\020\004\ufffa\006\ufffa\012\ufffa" +
    "\055\ufffa\057\ufffa\067\ufffa\072\ufffa\001\002\000\006\004" +
    "\010\072\004\001\002\000\004\002\137\001\002\000\004" +
    "\005\022\001\002\000\004\021\013\001\002\000\004\002" +
    "\000\001\002\000\012\067\014\070\020\073\015\075\017" +
    "\001\002\000\004\010\ufff8\001\002\000\004\010\ufff6\001" +
    "\002\000\004\010\021\001\002\000\004\010\ufff5\001\002" +
    "\000\004\010\ufff7\001\002\000\020\004\ufff9\006\ufff9\012" +
    "\ufff9\055\ufff9\057\ufff9\067\ufff9\072\ufff9\001\002\000\004" +
    "\006\023\001\002\000\004\072\024\001\002\000\004\021" +
    "\025\001\002\000\004\067\026\001\002\000\004\022\027" +
    "\001\002\000\004\072\030\001\002\000\004\021\031\001" +
    "\002\000\004\023\032\001\002\000\004\020\033\001\002" +
    "\000\004\073\034\001\002\000\004\007\035\001\002\000" +
    "\004\024\037\001\002\000\004\002\ufffe\001\002\000\016" +
    "\006\044\012\040\055\046\057\041\067\042\072\047\001" +
    "\002\000\010\006\044\012\040\067\042\001\002\000\012" +
    "\006\102\012\040\032\100\067\042\001\002\000\044\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\055\uffe1\056" +
    "\uffe1\057\uffe1\067\uffe1\072\uffe1\001\002\000\004\017\131" +
    "\001\002\000\010\006\044\012\040\067\042\001\002\000" +
    "\004\025\127\001\002\000\012\006\102\012\040\032\100" +
    "\067\042\001\002\000\010\017\uffe8\021\ufff3\022\076\001" +
    "\002\000\016\010\065\011\064\012\066\014\063\015\067" +
    "\041\062\001\002\000\004\010\061\001\002\000\016\006" +
    "\044\012\040\055\046\057\041\067\042\072\047\001\002" +
    "\000\020\006\044\012\040\025\056\055\046\057\041\067" +
    "\042\072\060\001\002\000\020\006\ufff1\012\ufff1\025\ufff1" +
    "\055\ufff1\057\ufff1\067\ufff1\072\ufff1\001\002\000\020\004" +
    "\ufffb\006\ufffb\012\ufffb\055\ufffb\057\ufffb\067\ufffb\072\ufffb" +
    "\001\002\000\004\002\ufffc\001\002\000\020\006\ufff2\012" +
    "\ufff2\025\ufff2\055\ufff2\057\ufff2\067\ufff2\072\ufff2\001\002" +
    "\000\004\017\uffe8\001\002\000\020\006\uffef\012\uffef\025" +
    "\uffef\055\uffef\057\uffef\067\uffef\072\uffef\001\002\000\010" +
    "\006\044\012\040\067\042\001\002\000\010\006\044\012" +
    "\040\067\042\001\002\000\010\006\044\012\040\067\042" +
    "\001\002\000\020\006\ufff0\012\ufff0\025\ufff0\055\ufff0\057" +
    "\ufff0\067\ufff0\072\ufff0\001\002\000\010\006\044\012\040" +
    "\067\042\001\002\000\010\006\044\012\040\067\042\001" +
    "\002\000\044\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\067\uffe4\072\uffe4\001\002" +
    "\000\044\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\014" +
    "\063\015\067\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\067\uffe6\072\uffe6\001\002\000" +
    "\044\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\014\063" +
    "\015\067\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\067\uffe7\072\uffe7\001\002\000\044" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\067\uffe5\072\uffe5\001\002\000\014\010" +
    "\075\011\064\012\066\014\063\015\067\001\002\000\006" +
    "\010\uffea\056\uffea\001\002\000\004\072\004\001\002\000" +
    "\004\021\ufff4\001\002\000\012\006\102\012\040\032\100" +
    "\067\042\001\002\000\020\006\044\012\040\042\117\055" +
    "\046\057\041\067\042\072\060\001\002\000\012\006\102" +
    "\012\040\032\100\067\042\001\002\000\022\011\064\012" +
    "\066\014\063\015\067\041\104\043\107\044\106\045\105" +
    "\001\002\000\010\006\044\012\040\067\042\001\002\000" +
    "\010\006\044\012\040\067\042\001\002\000\010\006\044" +
    "\012\040\067\042\001\002\000\010\006\044\012\040\067" +
    "\042\001\002\000\030\006\uffdf\007\uffdf\011\064\012\066" +
    "\014\063\015\067\042\uffdf\055\uffdf\057\uffdf\067\uffdf\072" +
    "\uffdf\001\002\000\030\006\uffdd\007\uffdd\011\064\012\066" +
    "\014\063\015\067\042\uffdd\055\uffdd\057\uffdd\067\uffdd\072" +
    "\uffdd\001\002\000\030\006\uffdc\007\uffdc\011\064\012\066" +
    "\014\063\015\067\042\uffdc\055\uffdc\057\uffdc\067\uffdc\072" +
    "\uffdc\001\002\000\030\006\uffdb\007\uffdb\011\064\012\066" +
    "\014\063\015\067\042\uffdb\055\uffdb\057\uffdb\067\uffdb\072" +
    "\uffdb\001\002\000\006\007\120\042\117\001\002\000\024" +
    "\007\116\011\064\012\066\014\063\015\067\041\104\043" +
    "\107\044\106\045\105\001\002\000\044\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\067\uffe3\072\uffe3\001\002\000\012\006\102\012\040\032" +
    "\100\067\042\001\002\000\022\006\uffda\007\uffda\012\uffda" +
    "\042\uffda\055\uffda\057\uffda\067\uffda\072\uffda\001\002\000" +
    "\022\006\uffe0\007\uffe0\012\uffe0\042\uffe0\055\uffe0\057\uffe0" +
    "\067\uffe0\072\uffe0\001\002\000\014\011\064\012\066\014" +
    "\063\015\067\041\062\001\002\000\006\010\uffec\056\uffec" +
    "\001\002\000\016\006\044\012\040\055\046\057\041\067" +
    "\042\072\060\001\002\000\006\010\uffed\056\uffed\001\002" +
    "\000\022\006\uffde\007\uffde\012\uffde\042\uffde\055\uffde\057" +
    "\uffde\067\uffde\072\uffde\001\002\000\004\002\ufffd\001\002" +
    "\000\014\007\116\011\064\012\066\014\063\015\067\001" +
    "\002\000\010\006\044\012\040\067\042\001\002\000\016" +
    "\010\uffe9\011\064\012\066\014\063\015\067\056\uffe9\001" +
    "\002\000\006\010\uffee\056\uffee\001\002\000\020\006\044" +
    "\012\040\042\117\055\046\057\041\067\042\072\060\001" +
    "\002\000\006\010\uffeb\056\uffeb\001\002\000\044\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014\uffe2\015\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\067\uffe2\072\uffe2\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\014\002\006\012\005\013\004\014\010\017" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\054\014\010\017\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\035\001\001" +
    "\000\002\001\001\000\020\003\047\004\050\005\042\010" +
    "\044\012\051\013\004\014\010\001\001\000\004\003\135" +
    "\001\001\000\006\003\102\020\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\127\001\001\000\002" +
    "\001\001\000\006\003\102\020\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\047" +
    "\004\050\005\042\010\053\011\052\013\054\014\010\001" +
    "\001\000\012\003\047\004\050\005\042\010\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\073\001\001\000\004\003\072\001\001\000\004\003" +
    "\071\001\001\000\002\001\001\000\004\003\070\001\001" +
    "\000\004\003\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\076\001\001\000\002\001" +
    "\001\000\006\003\102\020\125\001\001\000\010\003\121" +
    "\004\122\005\042\001\001\000\006\003\114\020\113\001" +
    "\001\000\002\001\001\000\004\003\112\001\001\000\004" +
    "\003\111\001\001\000\004\003\110\001\001\000\004\003" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\102\020\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\121\004\124\005\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\131\006\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\121\004\134\005" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DmParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DmParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DmParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    }

 

    public void report_error(String message, Object info) {
        StringBuffer msg = new StringBuffer("error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            msg.append(" in line ");
            msg.append(s.left);
        }
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_error(String message) {
        StringBuffer msg = new StringBuffer("error");
        System.err.println(msg);
    }

    public void report_error(String message, int line) {
        StringBuffer msg = new StringBuffer("error in line ");
        msg.append(line);
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
	throw new RuntimeException("Fatal Syntax Error");
    }

    public void syntax_error(Symbol cur_token) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(cur_token.left + 1))+"("+cur_token.right+")");
        System.err.println(msg);
    }

    public void syntax_error(int line, int column) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(line+1))+"("+column+")");
        System.err.println(msg);
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DmParser$actions {
  private final DmParser parser;

  /** Constructor */
  CUP$DmParser$actions(DmParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DmParser$do_action(
    int                        CUP$DmParser$act_num,
    java_cup.runtime.lr_parser CUP$DmParser$parser,
    java.util.Stack            CUP$DmParser$stack,
    int                        CUP$DmParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DmParser$result;

      /* select the action based on the action number */
      switch (CUP$DmParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprl ::= LPAR exprl RPAR 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", eleft, eright); RESULT = e; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",14, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exprl ::= expr EQ expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.EQ); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",14, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprl ::= expr LOR expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.LOR); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",14, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprl ::= expr LAND expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.LAND); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",14, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprl ::= NOT exprl 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", eleft, eright); RESULT = new SyntAbstr(e, EnumTag.NOT); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",14, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprl ::= expr OR expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr  	Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.OR); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",14, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exprl ::= exprl AND exprl 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr	Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.AND); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("exprl",14, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= INTEGER 
            {
              SyntAbstr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr 	Line:%d  Col:%d \n", strleft, strright); RESULT = new SyntAbstr(EnumTag.INTEGER, str); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= MINUS expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr  	Line:%d  Col:%d \n", eleft, eright);	RESULT = new SyntAbstr(e, EnumTag.MINUS_U); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= LPAR expr RPAR 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", eleft, eright); RESULT = e; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr DIV expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.DIV); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MULT expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr   Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.MULT); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MINUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr  	Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.MINUS); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr PLUS expr 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("***expr	Line:%d  Col:%d \n", e1left, e1right); RESULT = new SyntAbstr(e1, e2, EnumTag.PLUS); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lhs ::= ID 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** lhs\n"); RESULT = new SyntAbstr(EnumTag.ID, t);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("lhs",3, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rhs ::= expr 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** rhs\n");RESULT = e; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("rhs",4, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stm ::= expr EQ expr SEMIC 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		  RESULT = new SyntAbstr(e1, e2, EnumTag.EQ);
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stm ::= WHILE exprl stm 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT =  new SyntAbstr(e, i, EnumTag.WHILE); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stm ::= IF exprl stm 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		  RESULT = new SyntAbstr(e, i, EnumTag.IF); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stm ::= IF exprl stm THENELSE stm 
            {
              SyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr e = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr i1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 /* RESULT = new SyntAbstr(e, EnumTag.IF, new SyntAbstr(i1, i2, EnumTag.THENELSE));*/  
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-4)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stm ::= lhs AFF rhs 
            {
              SyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr e1 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr e2 = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** stm\n"); RESULT = new SyntAbstr(e1, e2, EnumTag.AFF); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("stm",2, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inst ::= stm SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** stm\n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("inst",6, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inst ::= expr SEMIC 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		 System.err.printf("*** inst \n"); RESULT = t; 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("inst",6, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrs ::= inst 
            {
              SyntAbstr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** inst \n"); RESULT = i;	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrs ::= instrs inst 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr t = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 System.err.printf("*** instrs \n" ); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vars ::= ID 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** variable\n");
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("vars",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vars ::= ID COMMA vars 
            {
              SyntAbstr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr v = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** variables \n"); RESULT =v;	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("vars",10, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= CHARACTER 
            {
              SyntAbstr RESULT =null;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= STRING 
            {
              SyntAbstr RESULT =null;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= FLOAT 
            {
              SyntAbstr RESULT =null;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= INTEGER 
            {
              SyntAbstr RESULT =null;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= vars TDOT type SEMIC 
            {
              SyntAbstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).right;
		SyntAbstr v = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)).value;
			System.err.printf("*** declaration \n"); RESULT = v;	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decl",9, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decls ::= decl 
            {
              SyntAbstr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** une declaration \n"); RESULT = d;	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decls",8, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decls ::= decls decl 
            {
              SyntAbstr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr s = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("*** plusieurs declaration \n"); 	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("decls",8, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloc ::= LCRO decls instrs RCRO 
            {
              SyntAbstr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;

              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("bloc",5, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloc ::= LCRO inst RCRO 
            {
              SyntAbstr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr i = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		  /*  bloc  */ 
	 RESULT = i;
	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("bloc",5, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pprog ::= PROCEDURE MAIN LPAR ID TDOT INTEGER COMMA ID TDOT LIST OF STRING RPAR bloc 
            {
              SyntAbstr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr b = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
		 RESULT = b;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("pprog",13, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-13)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // axiom ::= decls pprog 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		SyntAbstr d = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***declaration + programme principal \n"); 
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= pprog 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()).right;
		SyntAbstr p = (SyntAbstr)((java_cup.runtime.Symbol) CUP$DmParser$stack.peek()).value;
			System.err.printf("***programme principal \n"); RESULT = p;	
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          return CUP$DmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)).value;
		RESULT = start_val;
              CUP$DmParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DmParser$stack.elementAt(CUP$DmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DmParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DmParser$parser.done_parsing();
          return CUP$DmParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

